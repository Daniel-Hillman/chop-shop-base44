{"version":3,"file":"VisualEnhancementEngine-Bv-cAWMG.js","sources":["../../src/components/waveform/VisualEnhancementEngine.js"],"sourcesContent":["/**\r\n * Visual Enhancement Engine for Waveform Visualization\r\n * Implements color coding, accessibility features, and visual settings\r\n * Requirements: 8.1, 8.2, 8.3, 8.4, 8.5\r\n */\r\n\r\nexport class VisualEnhancementEngine {\r\n  constructor(options = {}) {\r\n    this.options = {\r\n      enableFrequencyColorCoding: true,\r\n      enableAmplitudeColorCoding: true,\r\n      enableStructureDetection: true,\r\n      enableAccessibilityMode: false,\r\n      enableHighContrastMode: false,\r\n      colorScheme: 'default', // 'default', 'high-contrast', 'colorblind-friendly'\r\n      ...options\r\n    };\r\n\r\n    // Color schemes for different frequency ranges\r\n    this.frequencyColorSchemes = {\r\n      default: {\r\n        bass: { r: 220, g: 38, b: 127 },      // Deep pink for bass (20-250 Hz)\r\n        lowMid: { r: 239, g: 68, b: 68 },     // Red for low-mid (250-500 Hz)\r\n        mid: { r: 245, g: 158, b: 11 },       // Orange for mid (500-2000 Hz)\r\n        highMid: { r: 34, g: 197, b: 94 },    // Green for high-mid (2-8 kHz)\r\n        treble: { r: 59, g: 130, b: 246 }     // Blue for treble (8+ kHz)\r\n      },\r\n      'high-contrast': {\r\n        bass: { r: 255, g: 255, b: 255 },     // White\r\n        lowMid: { r: 255, g: 255, b: 0 },     // Yellow\r\n        mid: { r: 255, g: 0, b: 255 },        // Magenta\r\n        highMid: { r: 0, g: 255, b: 255 },    // Cyan\r\n        treble: { r: 0, g: 0, b: 0 }          // Black\r\n      },\r\n      'colorblind-friendly': {\r\n        bass: { r: 0, g: 114, b: 178 },       // Blue\r\n        lowMid: { r: 230, g: 159, b: 0 },     // Orange\r\n        mid: { r: 0, g: 158, b: 115 },        // Bluish green\r\n        highMid: { r: 204, g: 121, b: 167 },  // Reddish purple\r\n        treble: { r: 86, g: 180, b: 233 }     // Sky blue\r\n      }\r\n    };\r\n\r\n    // Amplitude-based color intensity mapping\r\n    this.amplitudeColorMap = {\r\n      silent: { alpha: 0.1, brightness: 0.3 },      // Very quiet sections\r\n      quiet: { alpha: 0.3, brightness: 0.5 },       // Quiet sections\r\n      moderate: { alpha: 0.6, brightness: 0.7 },    // Normal levels\r\n      loud: { alpha: 0.8, brightness: 0.9 },        // Loud sections\r\n      peak: { alpha: 1.0, brightness: 1.0 }         // Peak levels\r\n    };\r\n\r\n    // Song structure detection patterns\r\n    this.structurePatterns = {\r\n      verse: { \r\n        color: { r: 100, g: 149, b: 237 }, \r\n        pattern: 'solid',\r\n        description: 'Verse section'\r\n      },\r\n      chorus: { \r\n        color: { r: 255, g: 215, b: 0 }, \r\n        pattern: 'gradient',\r\n        description: 'Chorus section'\r\n      },\r\n      bridge: { \r\n        color: { r: 147, g: 112, b: 219 }, \r\n        pattern: 'dashed',\r\n        description: 'Bridge section'\r\n      },\r\n      intro: { \r\n        color: { r: 60, g: 179, b: 113 }, \r\n        pattern: 'dotted',\r\n        description: 'Intro section'\r\n      },\r\n      outro: { \r\n        color: { r: 205, g: 92, b: 92 }, \r\n        pattern: 'dotted',\r\n        description: 'Outro section'\r\n      },\r\n      break: { \r\n        color: { r: 255, g: 140, b: 0 }, \r\n        pattern: 'sparse',\r\n        description: 'Break/Drop section'\r\n      }\r\n    };\r\n\r\n    // Accessibility patterns for non-color visual cues\r\n    this.accessibilityPatterns = {\r\n      bass: { pattern: 'vertical-lines', density: 'high' },\r\n      lowMid: { pattern: 'diagonal-lines', density: 'medium' },\r\n      mid: { pattern: 'dots', density: 'medium' },\r\n      highMid: { pattern: 'horizontal-lines', density: 'low' },\r\n      treble: { pattern: 'cross-hatch', density: 'sparse' }\r\n    };\r\n\r\n    this.cache = new Map();\r\n  }\r\n\r\n  /**\r\n   * Apply frequency-based color coding to waveform data\r\n   * Requirement 8.1: Color coding for different frequency ranges\r\n   */\r\n  applyFrequencyColorCoding(waveformData, frequencyData) {\r\n    if (!this.options.enableFrequencyColorCoding || !frequencyData) {\r\n      return this.getDefaultWaveformColors();\r\n    }\r\n\r\n    const cacheKey = `freq-${waveformData.duration}-${this.options.colorScheme}`;\r\n    if (this.cache.has(cacheKey)) {\r\n      return this.cache.get(cacheKey);\r\n    }\r\n\r\n    const colorScheme = this.frequencyColorSchemes[this.options.colorScheme] || \r\n                       this.frequencyColorSchemes.default;\r\n    \r\n    const coloredSegments = [];\r\n    const segmentSize = Math.floor(frequencyData.length / 100); // 100 segments for performance\r\n\r\n    for (let i = 0; i < 100; i++) {\r\n      const startIdx = i * segmentSize;\r\n      const endIdx = Math.min((i + 1) * segmentSize, frequencyData.length);\r\n      \r\n      // Analyze frequency content in this segment\r\n      const frequencyProfile = this.analyzeFrequencyContent(\r\n        frequencyData.slice(startIdx, endIdx)\r\n      );\r\n      \r\n      // Generate color based on dominant frequency\r\n      const dominantColor = this.getDominantFrequencyColor(frequencyProfile, colorScheme);\r\n      \r\n      coloredSegments.push({\r\n        startTime: (i / 100) * waveformData.duration,\r\n        endTime: ((i + 1) / 100) * waveformData.duration,\r\n        color: dominantColor,\r\n        frequencyProfile\r\n      });\r\n    }\r\n\r\n    this.cache.set(cacheKey, coloredSegments);\r\n    return coloredSegments;\r\n  }\r\n\r\n  /**\r\n   * Apply amplitude-based color intensity\r\n   * Requirement 8.1: Color coding for amplitude levels\r\n   */\r\n  applyAmplitudeColorCoding(waveformData) {\r\n    if (!this.options.enableAmplitudeColorCoding) {\r\n      return null;\r\n    }\r\n\r\n    const { samples } = waveformData;\r\n    if (!samples) return null;\r\n\r\n    const amplitudeSegments = [];\r\n    const segmentSize = Math.floor(samples.length / 200); // 200 segments\r\n\r\n    for (let i = 0; i < 200; i++) {\r\n      const startIdx = i * segmentSize;\r\n      const endIdx = Math.min((i + 1) * segmentSize, samples.length);\r\n      \r\n      // Calculate RMS amplitude for this segment\r\n      const rms = this.calculateRMS(samples.slice(startIdx, endIdx));\r\n      const amplitudeLevel = this.categorizeAmplitude(rms);\r\n      \r\n      amplitudeSegments.push({\r\n        startTime: (startIdx / samples.length) * waveformData.duration,\r\n        endTime: (endIdx / samples.length) * waveformData.duration,\r\n        amplitude: rms,\r\n        level: amplitudeLevel,\r\n        colorModifier: this.amplitudeColorMap[amplitudeLevel]\r\n      });\r\n    }\r\n\r\n    return amplitudeSegments;\r\n  }\r\n\r\n  /**\r\n   * Detect song structure and add visual cues\r\n   * Requirement 8.2: Visual cues for song structure detection\r\n   */\r\n  detectSongStructure(waveformData, metadata = {}) {\r\n    if (!this.options.enableStructureDetection) {\r\n      return [];\r\n    }\r\n\r\n    const cacheKey = `structure-${waveformData.duration}-${JSON.stringify(metadata)}`;\r\n    if (this.cache.has(cacheKey)) {\r\n      return this.cache.get(cacheKey);\r\n    }\r\n\r\n    const { samples, duration } = waveformData;\r\n    if (!samples || !duration) return [];\r\n\r\n    const structureSections = [];\r\n    \r\n    // Analyze energy patterns to detect sections\r\n    const energyProfile = this.analyzeEnergyProfile(samples, duration);\r\n    const sections = this.identifyStructuralSections(energyProfile, duration, metadata);\r\n    \r\n    sections.forEach(section => {\r\n      const pattern = this.structurePatterns[section.type] || this.structurePatterns.verse;\r\n      \r\n      structureSections.push({\r\n        ...section,\r\n        visualPattern: pattern,\r\n        accessibilityLabel: pattern.description\r\n      });\r\n    });\r\n\r\n    this.cache.set(cacheKey, structureSections);\r\n    return structureSections;\r\n  }\r\n\r\n  /**\r\n   * Apply high contrast mode for accessibility\r\n   * Requirement 8.3: High contrast mode and alternative visual representations\r\n   */\r\n  applyHighContrastMode(colorData) {\r\n    if (!this.options.enableHighContrastMode) {\r\n      return colorData;\r\n    }\r\n\r\n    return colorData.map(segment => ({\r\n      ...segment,\r\n      color: this.convertToHighContrast(segment.color),\r\n      strokeWidth: Math.max(segment.strokeWidth || 1, 2),\r\n      shadowBlur: 4,\r\n      shadowColor: 'rgba(0, 0, 0, 0.8)'\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Generate accessibility patterns for non-color visual cues\r\n   * Requirement 8.3: Alternative visual representations for accessibility\r\n   */\r\n  generateAccessibilityPatterns(frequencyData) {\r\n    if (!this.options.enableAccessibilityMode) {\r\n      return null;\r\n    }\r\n\r\n    const patterns = [];\r\n    const segmentSize = Math.floor(frequencyData.length / 50);\r\n\r\n    for (let i = 0; i < 50; i++) {\r\n      const startIdx = i * segmentSize;\r\n      const endIdx = Math.min((i + 1) * segmentSize, frequencyData.length);\r\n      \r\n      const frequencyProfile = this.analyzeFrequencyContent(\r\n        frequencyData.slice(startIdx, endIdx)\r\n      );\r\n      \r\n      const dominantFreq = this.getDominantFrequency(frequencyProfile);\r\n      const pattern = this.accessibilityPatterns[dominantFreq];\r\n      \r\n      patterns.push({\r\n        startTime: (i / 50) * (frequencyData.length / 44100), // Assume 44.1kHz\r\n        endTime: ((i + 1) / 50) * (frequencyData.length / 44100),\r\n        pattern: pattern.pattern,\r\n        density: pattern.density,\r\n        frequencyType: dominantFreq\r\n      });\r\n    }\r\n\r\n    return patterns;\r\n  }\r\n\r\n  /**\r\n   * Create configurable visual settings with real-time preview\r\n   * Requirement 8.4, 8.5: Configurable visual settings with real-time preview\r\n   */\r\n  createVisualSettings() {\r\n    return {\r\n      // Color coding settings\r\n      frequencyColorCoding: {\r\n        enabled: this.options.enableFrequencyColorCoding,\r\n        colorScheme: this.options.colorScheme,\r\n        intensity: 0.8,\r\n        blendMode: 'normal'\r\n      },\r\n      \r\n      amplitudeColorCoding: {\r\n        enabled: this.options.enableAmplitudeColorCoding,\r\n        sensitivity: 0.7,\r\n        dynamicRange: true\r\n      },\r\n      \r\n      // Structure detection settings\r\n      structureDetection: {\r\n        enabled: this.options.enableStructureDetection,\r\n        sensitivity: 0.6,\r\n        showLabels: true,\r\n        showPatterns: true\r\n      },\r\n      \r\n      // Accessibility settings\r\n      accessibility: {\r\n        highContrastMode: this.options.enableHighContrastMode,\r\n        alternativePatterns: this.options.enableAccessibilityMode,\r\n        textSize: 'medium',\r\n        reducedMotion: false\r\n      },\r\n      \r\n      // Visual enhancement settings\r\n      enhancements: {\r\n        gradientFill: true,\r\n        shadowEffects: false,\r\n        animatedElements: true,\r\n        particleEffects: false\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update visual settings with real-time preview\r\n   */\r\n  updateVisualSettings(newSettings, previewCallback) {\r\n    const oldSettings = { ...this.options };\r\n    \r\n    // Apply new settings\r\n    Object.assign(this.options, {\r\n      enableFrequencyColorCoding: newSettings.frequencyColorCoding?.enabled ?? this.options.enableFrequencyColorCoding,\r\n      enableAmplitudeColorCoding: newSettings.amplitudeColorCoding?.enabled ?? this.options.enableAmplitudeColorCoding,\r\n      enableStructureDetection: newSettings.structureDetection?.enabled ?? this.options.enableStructureDetection,\r\n      enableHighContrastMode: newSettings.accessibility?.highContrastMode ?? this.options.enableHighContrastMode,\r\n      enableAccessibilityMode: newSettings.accessibility?.alternativePatterns ?? this.options.enableAccessibilityMode,\r\n      colorScheme: newSettings.frequencyColorCoding?.colorScheme ?? this.options.colorScheme\r\n    });\r\n    \r\n    // Clear cache to force regeneration\r\n    this.cache.clear();\r\n    \r\n    // Trigger preview callback if provided\r\n    if (previewCallback && typeof previewCallback === 'function') {\r\n      try {\r\n        previewCallback(this.options, oldSettings);\r\n      } catch (error) {\r\n        console.error('Error in visual settings preview callback:', error);\r\n        // Revert settings on error\r\n        Object.assign(this.options, oldSettings);\r\n      }\r\n    }\r\n    \r\n    return this.options;\r\n  }\r\n\r\n  // Helper methods\r\n\r\n  analyzeFrequencyContent(frequencyData) {\r\n    const bassEnergy = this.calculateBandEnergy(frequencyData, 0, 10);      // 20-250 Hz\r\n    const lowMidEnergy = this.calculateBandEnergy(frequencyData, 10, 20);   // 250-500 Hz\r\n    const midEnergy = this.calculateBandEnergy(frequencyData, 20, 80);      // 500-2000 Hz\r\n    const highMidEnergy = this.calculateBandEnergy(frequencyData, 80, 160); // 2-8 kHz\r\n    const trebleEnergy = this.calculateBandEnergy(frequencyData, 160, 255); // 8+ kHz\r\n    \r\n    return { bassEnergy, lowMidEnergy, midEnergy, highMidEnergy, trebleEnergy };\r\n  }\r\n\r\n  calculateBandEnergy(frequencyData, startBin, endBin) {\r\n    let energy = 0;\r\n    for (let i = startBin; i <= Math.min(endBin, frequencyData.length - 1); i++) {\r\n      energy += frequencyData[i] * frequencyData[i];\r\n    }\r\n    return Math.sqrt(energy / (endBin - startBin + 1));\r\n  }\r\n\r\n  getDominantFrequencyColor(frequencyProfile, colorScheme) {\r\n    const { bassEnergy, lowMidEnergy, midEnergy, highMidEnergy, trebleEnergy } = frequencyProfile;\r\n    \r\n    // Find dominant frequency range\r\n    const energies = { bassEnergy, lowMidEnergy, midEnergy, highMidEnergy, trebleEnergy };\r\n    const dominantRange = Object.keys(energies).reduce((a, b) => \r\n      energies[a] > energies[b] ? a : b\r\n    );\r\n    \r\n    // Map to color scheme\r\n    const colorMap = {\r\n      bassEnergy: colorScheme.bass,\r\n      lowMidEnergy: colorScheme.lowMid,\r\n      midEnergy: colorScheme.mid,\r\n      highMidEnergy: colorScheme.highMid,\r\n      trebleEnergy: colorScheme.treble\r\n    };\r\n    \r\n    const baseColor = colorMap[dominantRange];\r\n    const intensity = energies[dominantRange] / 255; // Normalize to 0-1\r\n    \r\n    return {\r\n      r: Math.round(baseColor.r * intensity),\r\n      g: Math.round(baseColor.g * intensity),\r\n      b: Math.round(baseColor.b * intensity),\r\n      a: Math.min(0.8, intensity)\r\n    };\r\n  }\r\n\r\n  getDominantFrequency(frequencyProfile) {\r\n    const { bassEnergy, lowMidEnergy, midEnergy, highMidEnergy, trebleEnergy } = frequencyProfile;\r\n    const energies = { bass: bassEnergy, lowMid: lowMidEnergy, mid: midEnergy, highMid: highMidEnergy, treble: trebleEnergy };\r\n    \r\n    return Object.keys(energies).reduce((a, b) => energies[a] > energies[b] ? a : b);\r\n  }\r\n\r\n  calculateRMS(samples) {\r\n    if (!samples || samples.length === 0) return 0;\r\n    \r\n    let sum = 0;\r\n    for (let i = 0; i < samples.length; i++) {\r\n      sum += samples[i] * samples[i];\r\n    }\r\n    return Math.sqrt(sum / samples.length);\r\n  }\r\n\r\n  categorizeAmplitude(rms) {\r\n    if (rms < 0.01) return 'silent';\r\n    if (rms < 0.1) return 'quiet';\r\n    if (rms < 0.5) return 'moderate';\r\n    if (rms < 0.8) return 'loud';\r\n    return 'peak';\r\n  }\r\n\r\n  analyzeEnergyProfile(samples, duration) {\r\n    const windowSize = Math.floor(samples.length / 100); // 100 windows\r\n    const energyProfile = [];\r\n    \r\n    for (let i = 0; i < 100; i++) {\r\n      const start = i * windowSize;\r\n      const end = Math.min((i + 1) * windowSize, samples.length);\r\n      const windowSamples = samples.slice(start, end);\r\n      \r\n      const rms = this.calculateRMS(windowSamples);\r\n      const spectralCentroid = this.calculateSpectralCentroid(windowSamples);\r\n      \r\n      energyProfile.push({\r\n        time: (i / 100) * duration,\r\n        energy: rms,\r\n        spectralCentroid,\r\n        variance: this.calculateVariance(windowSamples)\r\n      });\r\n    }\r\n    \r\n    return energyProfile;\r\n  }\r\n\r\n  identifyStructuralSections(energyProfile, duration, metadata) {\r\n    const sections = [];\r\n    let currentSection = null;\r\n    \r\n    // Simple structure detection based on energy patterns\r\n    energyProfile.forEach((window, index) => {\r\n      const sectionType = this.classifySection(window, energyProfile, index);\r\n      \r\n      if (!currentSection || currentSection.type !== sectionType) {\r\n        if (currentSection) {\r\n          currentSection.endTime = window.time;\r\n          sections.push(currentSection);\r\n        }\r\n        \r\n        currentSection = {\r\n          type: sectionType,\r\n          startTime: window.time,\r\n          endTime: duration,\r\n          confidence: 0.7 // Basic confidence score\r\n        };\r\n      }\r\n    });\r\n    \r\n    if (currentSection) {\r\n      sections.push(currentSection);\r\n    }\r\n    \r\n    return sections;\r\n  }\r\n\r\n  classifySection(window, energyProfile, index) {\r\n    const { energy, spectralCentroid, variance } = window;\r\n    \r\n    // Simple heuristics for section classification\r\n    if (index < 5) return 'intro';\r\n    if (index > energyProfile.length - 5) return 'outro';\r\n    \r\n    if (energy > 0.7 && spectralCentroid > 0.6) return 'chorus';\r\n    if (energy < 0.3 && variance < 0.2) return 'break';\r\n    if (spectralCentroid < 0.4 && variance > 0.5) return 'bridge';\r\n    \r\n    return 'verse';\r\n  }\r\n\r\n  calculateSpectralCentroid(samples) {\r\n    // Simplified spectral centroid calculation\r\n    let weightedSum = 0;\r\n    let magnitudeSum = 0;\r\n    \r\n    for (let i = 0; i < samples.length; i++) {\r\n      const magnitude = Math.abs(samples[i]);\r\n      weightedSum += i * magnitude;\r\n      magnitudeSum += magnitude;\r\n    }\r\n    \r\n    return magnitudeSum > 0 ? (weightedSum / magnitudeSum) / samples.length : 0;\r\n  }\r\n\r\n  calculateVariance(samples) {\r\n    if (samples.length === 0) return 0;\r\n    \r\n    const mean = samples.reduce((sum, val) => sum + val, 0) / samples.length;\r\n    const variance = samples.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / samples.length;\r\n    \r\n    return Math.sqrt(variance);\r\n  }\r\n\r\n  convertToHighContrast(color) {\r\n    const { r, g, b, a } = color;\r\n    const luminance = 0.299 * r + 0.587 * g + 0.114 * b;\r\n    \r\n    // Convert to high contrast black or white based on luminance\r\n    if (luminance > 128) {\r\n      return { r: 255, g: 255, b: 255, a: a || 1 };\r\n    } else {\r\n      return { r: 0, g: 0, b: 0, a: a || 1 };\r\n    }\r\n  }\r\n\r\n  getDefaultWaveformColors() {\r\n    return [{\r\n      startTime: 0,\r\n      endTime: Infinity,\r\n      color: { r: 6, g: 182, b: 212, a: 0.8 }\r\n    }];\r\n  }\r\n\r\n  destroy() {\r\n    this.cache.clear();\r\n  }\r\n}"],"names":["VisualEnhancementEngine","constructor","options","this","enableFrequencyColorCoding","enableAmplitudeColorCoding","enableStructureDetection","enableAccessibilityMode","enableHighContrastMode","colorScheme","frequencyColorSchemes","default","bass","r","g","b","lowMid","mid","highMid","treble","amplitudeColorMap","silent","alpha","brightness","quiet","moderate","loud","peak","structurePatterns","verse","color","pattern","description","chorus","bridge","intro","outro","break","accessibilityPatterns","density","cache","Map","applyFrequencyColorCoding","waveformData","frequencyData","getDefaultWaveformColors","cacheKey","duration","has","get","coloredSegments","segmentSize","Math","floor","length","i","startIdx","endIdx","min","frequencyProfile","analyzeFrequencyContent","slice","dominantColor","getDominantFrequencyColor","push","startTime","endTime","set","applyAmplitudeColorCoding","samples","amplitudeSegments","rms","calculateRMS","amplitudeLevel","categorizeAmplitude","amplitude","level","colorModifier","detectSongStructure","metadata","JSON","stringify","structureSections","energyProfile","analyzeEnergyProfile","identifyStructuralSections","forEach","section","type","visualPattern","accessibilityLabel","applyHighContrastMode","colorData","map","segment","convertToHighContrast","strokeWidth","max","shadowBlur","shadowColor","generateAccessibilityPatterns","patterns","dominantFreq","getDominantFrequency","frequencyType","createVisualSettings","frequencyColorCoding","enabled","intensity","blendMode","amplitudeColorCoding","sensitivity","dynamicRange","structureDetection","showLabels","showPatterns","accessibility","highContrastMode","alternativePatterns","textSize","reducedMotion","enhancements","gradientFill","shadowEffects","animatedElements","particleEffects","updateVisualSettings","newSettings","previewCallback","oldSettings","Object","assign","clear","error","bassEnergy","calculateBandEnergy","lowMidEnergy","midEnergy","highMidEnergy","trebleEnergy","startBin","endBin","energy","sqrt","energies","dominantRange","keys","reduce","a","baseColor","round","sum","windowSize","start","end","windowSamples","spectralCentroid","calculateSpectralCentroid","time","variance","calculateVariance","sections","currentSection","window","index","sectionType","classifySection","confidence","weightedSum","magnitudeSum","magnitude","abs","mean","val","pow","Infinity","destroy"],"mappings":"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"}