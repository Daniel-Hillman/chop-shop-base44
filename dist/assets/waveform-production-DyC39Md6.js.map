{"version":3,"file":"waveform-production-DyC39Md6.js","sources":["../../src/services/WaveformFeatureFlags.js","../../src/services/WaveformAnalytics.js"],"sourcesContent":["/**\r\n * Feature flags system for gradual rollout of waveform capabilities\r\n */\r\n\r\nimport React from 'react';\r\n\r\n/**\r\n * Default feature flag configuration\r\n */\r\nconst DEFAULT_FLAGS = {\r\n  // Core waveform features\r\n  waveformVisualization: {\r\n    enabled: true,\r\n    rolloutPercentage: 100,\r\n    description: 'Basic waveform visualization'\r\n  },\r\n  \r\n  // Advanced analysis features\r\n  webAudioAnalysis: {\r\n    enabled: true,\r\n    rolloutPercentage: 90,\r\n    description: 'Web Audio API based analysis',\r\n    requirements: ['webAudioSupport']\r\n  },\r\n  \r\n  videoFrameAnalysis: {\r\n    enabled: true,\r\n    rolloutPercentage: 80,\r\n    description: 'Video frame based audio analysis fallback',\r\n    requirements: ['canvasSupport']\r\n  },\r\n  \r\n  // Interactive features\r\n  dragChopCreation: {\r\n    enabled: true,\r\n    rolloutPercentage: 95,\r\n    description: 'Drag-based chop creation and editing'\r\n  },\r\n  \r\n  zeroCrossingDetection: {\r\n    enabled: true,\r\n    rolloutPercentage: 70,\r\n    description: 'Zero-crossing detection for clean cuts',\r\n    requirements: ['webAudioSupport']\r\n  },\r\n  \r\n  smartSnapping: {\r\n    enabled: true,\r\n    rolloutPercentage: 75,\r\n    description: 'Smart snapping to optimal cut points',\r\n    requirements: ['zeroCrossingDetection']\r\n  },\r\n  \r\n  // Visual enhancements\r\n  visualEnhancements: {\r\n    enabled: true,\r\n    rolloutPercentage: 60,\r\n    description: 'Advanced visual enhancements and color coding',\r\n    requirements: ['highPerformanceDevice']\r\n  },\r\n  \r\n  frequencyAnalysis: {\r\n    enabled: false,\r\n    rolloutPercentage: 30,\r\n    description: 'Real-time frequency analysis visualization',\r\n    requirements: ['webAudioSupport', 'highPerformanceDevice']\r\n  },\r\n  \r\n  // Performance features\r\n  webWorkerAnalysis: {\r\n    enabled: true,\r\n    rolloutPercentage: 85,\r\n    description: 'Background audio analysis using Web Workers',\r\n    requirements: ['webWorkerSupport']\r\n  },\r\n  \r\n  offscreenCanvas: {\r\n    enabled: true,\r\n    rolloutPercentage: 50,\r\n    description: 'Offscreen canvas rendering for better performance',\r\n    requirements: ['offscreenCanvasSupport']\r\n  },\r\n  \r\n  // Experimental features\r\n  audioWorkletAnalysis: {\r\n    enabled: false,\r\n    rolloutPercentage: 10,\r\n    description: 'AudioWorklet-based real-time analysis',\r\n    requirements: ['audioWorkletSupport', 'experimentalFeatures']\r\n  },\r\n  \r\n  aiPoweredChopSuggestions: {\r\n    enabled: false,\r\n    rolloutPercentage: 5,\r\n    description: 'AI-powered chop suggestions based on musical structure',\r\n    requirements: ['experimentalFeatures', 'highPerformanceDevice']\r\n  },\r\n  \r\n  // Debug and development features\r\n  performanceMonitoring: {\r\n    enabled: process.env.NODE_ENV === 'production',\r\n    rolloutPercentage: 100,\r\n    description: 'Performance monitoring and analytics'\r\n  },\r\n  \r\n  debugVisualization: {\r\n    enabled: process.env.NODE_ENV === 'development',\r\n    rolloutPercentage: 100,\r\n    description: 'Debug visualization overlays'\r\n  }\r\n};\r\n\r\n/**\r\n * Feature flags manager\r\n */\r\nclass WaveformFeatureFlags {\r\n  constructor() {\r\n    this.flags = { ...DEFAULT_FLAGS };\r\n    this.userSegment = this._determineUserSegment();\r\n    this.deviceCapabilities = this._detectDeviceCapabilities();\r\n    this.overrides = this._loadOverrides();\r\n    \r\n    // Apply overrides\r\n    this._applyOverrides();\r\n  }\r\n\r\n  /**\r\n   * Check if a feature is enabled for the current user\r\n   */\r\n  isEnabled(featureName) {\r\n    const flag = this.flags[featureName];\r\n    \r\n    if (!flag) {\r\n      console.warn(`Unknown feature flag: ${featureName}`);\r\n      return false;\r\n    }\r\n\r\n    // Check if feature is globally disabled\r\n    if (!flag.enabled) {\r\n      return false;\r\n    }\r\n\r\n    // Check requirements\r\n    if (flag.requirements && !this._checkRequirements(flag.requirements)) {\r\n      return false;\r\n    }\r\n\r\n    // Check rollout percentage\r\n    if (!this._isInRollout(featureName, flag.rolloutPercentage)) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Get all enabled features\r\n   */\r\n  getEnabledFeatures() {\r\n    return Object.keys(this.flags).filter(featureName => \r\n      this.isEnabled(featureName)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get feature flag details\r\n   */\r\n  getFeatureDetails(featureName) {\r\n    const flag = this.flags[featureName];\r\n    \r\n    if (!flag) {\r\n      return null;\r\n    }\r\n\r\n    return {\r\n      ...flag,\r\n      isEnabled: this.isEnabled(featureName),\r\n      requirementsMet: flag.requirements ? \r\n        this._checkRequirements(flag.requirements) : true,\r\n      inRollout: this._isInRollout(featureName, flag.rolloutPercentage)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Override feature flag for testing/debugging\r\n   */\r\n  override(featureName, enabled) {\r\n    if (!this.flags[featureName]) {\r\n      console.warn(`Cannot override unknown feature: ${featureName}`);\r\n      return;\r\n    }\r\n\r\n    this.overrides[featureName] = enabled;\r\n    this._saveOverrides();\r\n    \r\n    console.log(`Feature flag override: ${featureName} = ${enabled}`);\r\n  }\r\n\r\n  /**\r\n   * Clear all overrides\r\n   */\r\n  clearOverrides() {\r\n    this.overrides = {};\r\n    this._saveOverrides();\r\n    console.log('All feature flag overrides cleared');\r\n  }\r\n\r\n  /**\r\n   * Get feature flags summary for debugging\r\n   */\r\n  getSummary() {\r\n    const enabledFeatures = this.getEnabledFeatures();\r\n    const totalFeatures = Object.keys(this.flags).length;\r\n    \r\n    return {\r\n      userSegment: this.userSegment,\r\n      deviceCapabilities: this.deviceCapabilities,\r\n      enabledFeatures,\r\n      totalFeatures,\r\n      enabledCount: enabledFeatures.length,\r\n      overrides: this.overrides,\r\n      flagDetails: Object.fromEntries(\r\n        Object.keys(this.flags).map(name => [\r\n          name, \r\n          this.getFeatureDetails(name)\r\n        ])\r\n      )\r\n    };\r\n  }\r\n\r\n  // Private methods\r\n  _determineUserSegment() {\r\n    // Determine user segment for A/B testing\r\n    const userId = this._getUserId();\r\n    const hash = this._hashString(userId);\r\n    \r\n    // Segment users into groups\r\n    const segmentValue = hash % 100;\r\n    \r\n    if (segmentValue < 10) return 'early_adopters';\r\n    if (segmentValue < 30) return 'beta_users';\r\n    if (segmentValue < 80) return 'regular_users';\r\n    return 'conservative_users';\r\n  }\r\n\r\n  _detectDeviceCapabilities() {\r\n    return {\r\n      webAudioSupport: 'AudioContext' in window || 'webkitAudioContext' in window,\r\n      webWorkerSupport: 'Worker' in window,\r\n      offscreenCanvasSupport: 'OffscreenCanvas' in window,\r\n      audioWorkletSupport: 'AudioWorklet' in window,\r\n      canvasSupport: 'HTMLCanvasElement' in window,\r\n      highPerformanceDevice: this._isHighPerformanceDevice(),\r\n      experimentalFeatures: this._allowExperimentalFeatures()\r\n    };\r\n  }\r\n\r\n  _isHighPerformanceDevice() {\r\n    // Detect high-performance devices\r\n    const hardwareConcurrency = navigator.hardwareConcurrency || 2;\r\n    const deviceMemory = navigator.deviceMemory || 2;\r\n    const isMobile = /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\r\n    \r\n    return hardwareConcurrency >= 4 && deviceMemory >= 4 && !isMobile;\r\n  }\r\n\r\n  _allowExperimentalFeatures() {\r\n    // Allow experimental features for developers and early adopters\r\n    return process.env.NODE_ENV === 'development' || \r\n           this.userSegment === 'early_adopters' ||\r\n           localStorage.getItem('waveform_experimental_features') === 'true';\r\n  }\r\n\r\n  _checkRequirements(requirements) {\r\n    return requirements.every(requirement => {\r\n      if (requirement in this.deviceCapabilities) {\r\n        return this.deviceCapabilities[requirement];\r\n      }\r\n      \r\n      // Check for feature dependencies\r\n      if (requirement in this.flags) {\r\n        return this.isEnabled(requirement);\r\n      }\r\n      \r\n      console.warn(`Unknown requirement: ${requirement}`);\r\n      return false;\r\n    });\r\n  }\r\n\r\n  _isInRollout(featureName, rolloutPercentage) {\r\n    if (rolloutPercentage >= 100) return true;\r\n    if (rolloutPercentage <= 0) return false;\r\n    \r\n    // Use consistent hash for stable rollout\r\n    const userId = this._getUserId();\r\n    const featureHash = this._hashString(`${userId}_${featureName}`);\r\n    const userPercentile = featureHash % 100;\r\n    \r\n    return userPercentile < rolloutPercentage;\r\n  }\r\n\r\n  _getUserId() {\r\n    // Generate or retrieve stable user ID\r\n    let userId = localStorage.getItem('waveform_user_id');\r\n    \r\n    if (!userId) {\r\n      userId = `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n      localStorage.setItem('waveform_user_id', userId);\r\n    }\r\n    \r\n    return userId;\r\n  }\r\n\r\n  _hashString(str) {\r\n    // Simple hash function for consistent user segmentation\r\n    let hash = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n      const char = str.charCodeAt(i);\r\n      hash = ((hash << 5) - hash) + char;\r\n      hash = hash & hash; // Convert to 32-bit integer\r\n    }\r\n    return Math.abs(hash);\r\n  }\r\n\r\n  _loadOverrides() {\r\n    try {\r\n      const overrides = localStorage.getItem('waveform_feature_overrides');\r\n      return overrides ? JSON.parse(overrides) : {};\r\n    } catch (error) {\r\n      console.warn('Failed to load feature flag overrides:', error);\r\n      return {};\r\n    }\r\n  }\r\n\r\n  _saveOverrides() {\r\n    try {\r\n      localStorage.setItem('waveform_feature_overrides', JSON.stringify(this.overrides));\r\n    } catch (error) {\r\n      console.warn('Failed to save feature flag overrides:', error);\r\n    }\r\n  }\r\n\r\n  _applyOverrides() {\r\n    for (const [featureName, enabled] of Object.entries(this.overrides)) {\r\n      if (this.flags[featureName]) {\r\n        this.flags[featureName].enabled = enabled;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Singleton instance\r\nexport const waveformFeatureFlags = new WaveformFeatureFlags();\r\n\r\n/**\r\n * React hook for using feature flags\r\n */\r\nexport const useWaveformFeatureFlag = (featureName) => {\r\n  const [isEnabled, setIsEnabled] = React.useState(\r\n    waveformFeatureFlags.isEnabled(featureName)\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    // Re-check feature flag if overrides change\r\n    const checkFlag = () => {\r\n      setIsEnabled(waveformFeatureFlags.isEnabled(featureName));\r\n    };\r\n\r\n    // Listen for storage changes (overrides from other tabs)\r\n    window.addEventListener('storage', checkFlag);\r\n    \r\n    return () => {\r\n      window.removeEventListener('storage', checkFlag);\r\n    };\r\n  }, [featureName]);\r\n\r\n  return isEnabled;\r\n};\r\n\r\n/**\r\n * Higher-order component for feature flag gating\r\n */\r\nexport const withFeatureFlag = (featureName, FallbackComponent = null) => {\r\n  return (WrappedComponent) => {\r\n    return (props) => {\r\n      const isEnabled = useWaveformFeatureFlag(featureName);\r\n      \r\n      if (!isEnabled) {\r\n        return FallbackComponent ? React.createElement(FallbackComponent, props) : null;\r\n      }\r\n      \r\n      return React.createElement(WrappedComponent, props);\r\n    };\r\n  };\r\n};\r\n\r\n/**\r\n * Feature flag debugging utilities\r\n */\r\nexport const debugFeatureFlags = () => {\r\n  if (process.env.NODE_ENV !== 'development') {\r\n    console.warn('Feature flag debugging only available in development');\r\n    return;\r\n  }\r\n\r\n  console.group('Waveform Feature Flags Debug');\r\n  console.log('Summary:', waveformFeatureFlags.getSummary());\r\n  console.log('Enabled features:', waveformFeatureFlags.getEnabledFeatures());\r\n  console.groupEnd();\r\n\r\n  // Add global debug functions\r\n  window.waveformFeatureFlags = {\r\n    isEnabled: waveformFeatureFlags.isEnabled.bind(waveformFeatureFlags),\r\n    override: waveformFeatureFlags.override.bind(waveformFeatureFlags),\r\n    clearOverrides: waveformFeatureFlags.clearOverrides.bind(waveformFeatureFlags),\r\n    getSummary: waveformFeatureFlags.getSummary.bind(waveformFeatureFlags)\r\n  };\r\n\r\n  console.log('Debug functions available at window.waveformFeatureFlags');\r\n};","/**\r\n * Analytics service for tracking waveform usage patterns and performance metrics\r\n */\r\nclass WaveformAnalytics {\r\n  constructor() {\r\n    this.sessionId = this._generateSessionId();\r\n    this.events = [];\r\n    this.performanceMetrics = new Map();\r\n    this.userBehaviorPatterns = new Map();\r\n    this.isEnabled = this._checkAnalyticsConsent();\r\n  }\r\n\r\n  /**\r\n   * Track waveform interaction events\r\n   */\r\n  trackEvent(eventType, eventData = {}) {\r\n    if (!this.isEnabled) return;\r\n\r\n    const event = {\r\n      sessionId: this.sessionId,\r\n      timestamp: Date.now(),\r\n      type: eventType,\r\n      data: {\r\n        ...eventData,\r\n        userAgent: navigator.userAgent,\r\n        viewport: {\r\n          width: window.innerWidth,\r\n          height: window.innerHeight\r\n        }\r\n      }\r\n    };\r\n\r\n    this.events.push(event);\r\n    this._processEvent(event);\r\n\r\n    // Batch send events to prevent performance impact\r\n    if (this.events.length >= 10) {\r\n      this._flushEvents();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Track performance metrics\r\n   */\r\n  trackPerformance(metricName, value, metadata = {}) {\r\n    if (!this.isEnabled) return;\r\n\r\n    const metric = {\r\n      name: metricName,\r\n      value,\r\n      timestamp: Date.now(),\r\n      sessionId: this.sessionId,\r\n      metadata\r\n    };\r\n\r\n    if (!this.performanceMetrics.has(metricName)) {\r\n      this.performanceMetrics.set(metricName, []);\r\n    }\r\n\r\n    this.performanceMetrics.get(metricName).push(metric);\r\n    \r\n    // Track performance trends\r\n    this._analyzePerformanceTrend(metricName, value);\r\n  }\r\n\r\n  /**\r\n   * Track waveform generation performance\r\n   */\r\n  trackWaveformGeneration(analysisMethod, duration, audioLength, quality) {\r\n    this.trackEvent('waveform_generation', {\r\n      analysisMethod,\r\n      generationTime: duration,\r\n      audioLength,\r\n      quality,\r\n      efficiency: audioLength / duration // seconds of audio per second of processing\r\n    });\r\n\r\n    this.trackPerformance('waveform_generation_time', duration, {\r\n      analysisMethod,\r\n      audioLength,\r\n      quality\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Track user interaction patterns\r\n   */\r\n  trackInteraction(interactionType, details = {}) {\r\n    this.trackEvent('waveform_interaction', {\r\n      interactionType,\r\n      ...details\r\n    });\r\n\r\n    // Update behavior patterns\r\n    const patternKey = `interaction_${interactionType}`;\r\n    const currentCount = this.userBehaviorPatterns.get(patternKey) || 0;\r\n    this.userBehaviorPatterns.set(patternKey, currentCount + 1);\r\n  }\r\n\r\n  /**\r\n   * Track chop creation and editing patterns\r\n   */\r\n  trackChopActivity(activity, chopData = {}) {\r\n    this.trackEvent('chop_activity', {\r\n      activity, // 'create', 'edit', 'delete', 'play'\r\n      chopDuration: chopData.duration,\r\n      chopPosition: chopData.startTime,\r\n      creationMethod: chopData.creationMethod, // 'click', 'drag', 'keyboard'\r\n      snapUsed: chopData.snapUsed || false\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Track zoom and navigation usage\r\n   */\r\n  trackNavigation(action, zoomLevel, timeRange) {\r\n    this.trackEvent('waveform_navigation', {\r\n      action, // 'zoom_in', 'zoom_out', 'pan', 'seek'\r\n      zoomLevel,\r\n      timeRange: {\r\n        start: timeRange.start,\r\n        end: timeRange.end,\r\n        duration: timeRange.end - timeRange.start\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Track error occurrences and recovery\r\n   */\r\n  trackError(errorType, errorMessage, context = {}) {\r\n    this.trackEvent('waveform_error', {\r\n      errorType,\r\n      errorMessage,\r\n      context,\r\n      recoveryAttempted: context.recoveryAttempted || false,\r\n      recoverySuccessful: context.recoverySuccessful || false\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Track feature usage and adoption\r\n   */\r\n  trackFeatureUsage(featureName, usageContext = {}) {\r\n    this.trackEvent('feature_usage', {\r\n      featureName,\r\n      ...usageContext\r\n    });\r\n\r\n    // Update feature adoption metrics\r\n    const adoptionKey = `feature_${featureName}`;\r\n    const currentUsage = this.userBehaviorPatterns.get(adoptionKey) || 0;\r\n    this.userBehaviorPatterns.set(adoptionKey, currentUsage + 1);\r\n  }\r\n\r\n  /**\r\n   * Get analytics summary for debugging and optimization\r\n   */\r\n  getAnalyticsSummary() {\r\n    return {\r\n      sessionId: this.sessionId,\r\n      totalEvents: this.events.length,\r\n      performanceMetrics: Object.fromEntries(\r\n        Array.from(this.performanceMetrics.entries()).map(([key, values]) => [\r\n          key,\r\n          {\r\n            count: values.length,\r\n            average: values.reduce((sum, v) => sum + v.value, 0) / values.length,\r\n            latest: values[values.length - 1]?.value\r\n          }\r\n        ])\r\n      ),\r\n      userBehaviorPatterns: Object.fromEntries(this.userBehaviorPatterns),\r\n      topInteractions: this._getTopInteractions(),\r\n      performanceTrends: this._getPerformanceTrends()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Export analytics data for analysis\r\n   */\r\n  exportAnalyticsData() {\r\n    if (!this.isEnabled) return null;\r\n\r\n    return {\r\n      sessionId: this.sessionId,\r\n      events: this.events,\r\n      performanceMetrics: Object.fromEntries(this.performanceMetrics),\r\n      userBehaviorPatterns: Object.fromEntries(this.userBehaviorPatterns),\r\n      exportedAt: Date.now()\r\n    };\r\n  }\r\n\r\n  // Private methods\r\n  _generateSessionId() {\r\n    return `waveform_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  _checkAnalyticsConsent() {\r\n    // Check for user consent (implement based on your privacy policy)\r\n    return localStorage.getItem('waveform_analytics_consent') === 'true';\r\n  }\r\n\r\n  _processEvent(event) {\r\n    // Process event for real-time insights\r\n    switch (event.type) {\r\n      case 'waveform_generation':\r\n        this._analyzeGenerationPerformance(event.data);\r\n        break;\r\n      case 'waveform_interaction':\r\n        this._analyzeInteractionPattern(event.data);\r\n        break;\r\n      case 'waveform_error':\r\n        this._analyzeErrorPattern(event.data);\r\n        break;\r\n    }\r\n  }\r\n\r\n  _analyzeGenerationPerformance(data) {\r\n    // Analyze if generation performance is degrading\r\n    const recentGenerations = this.events\r\n      .filter(e => e.type === 'waveform_generation')\r\n      .slice(-5);\r\n\r\n    if (recentGenerations.length >= 3) {\r\n      const avgTime = recentGenerations.reduce((sum, e) => sum + e.data.generationTime, 0) / recentGenerations.length;\r\n      \r\n      if (avgTime > 5000) { // More than 5 seconds\r\n        console.warn('Waveform generation performance degrading:', avgTime);\r\n      }\r\n    }\r\n  }\r\n\r\n  _analyzeInteractionPattern(data) {\r\n    // Analyze user interaction patterns for UX insights\r\n    const interactionType = data.interactionType;\r\n    const recentInteractions = this.events\r\n      .filter(e => e.type === 'waveform_interaction' && e.data.interactionType === interactionType)\r\n      .slice(-10);\r\n\r\n    // Track interaction frequency\r\n    if (recentInteractions.length >= 5) {\r\n      const timeSpan = recentInteractions[recentInteractions.length - 1].timestamp - recentInteractions[0].timestamp;\r\n      const frequency = recentInteractions.length / (timeSpan / 1000); // interactions per second\r\n      \r\n      if (frequency > 2) { // More than 2 interactions per second might indicate confusion\r\n        console.log(`High frequency ${interactionType} interactions detected:`, frequency);\r\n      }\r\n    }\r\n  }\r\n\r\n  _analyzeErrorPattern(data) {\r\n    // Analyze error patterns for stability insights\r\n    const errorType = data.errorType;\r\n    const recentErrors = this.events\r\n      .filter(e => e.type === 'waveform_error' && e.data.errorType === errorType)\r\n      .slice(-5);\r\n\r\n    if (recentErrors.length >= 3) {\r\n      console.warn(`Recurring ${errorType} errors detected:`, recentErrors.length);\r\n    }\r\n  }\r\n\r\n  _analyzePerformanceTrend(metricName, value) {\r\n    const metrics = this.performanceMetrics.get(metricName) || [];\r\n    if (metrics.length >= 5) {\r\n      const recent = metrics.slice(-5);\r\n      const trend = recent[recent.length - 1].value - recent[0].value;\r\n      \r\n      if (Math.abs(trend) > value * 0.5) { // 50% change\r\n        console.log(`Performance trend detected for ${metricName}:`, trend > 0 ? 'degrading' : 'improving');\r\n      }\r\n    }\r\n  }\r\n\r\n  _getTopInteractions() {\r\n    const interactions = Array.from(this.userBehaviorPatterns.entries())\r\n      .filter(([key]) => key.startsWith('interaction_'))\r\n      .sort(([, a], [, b]) => b - a)\r\n      .slice(0, 5);\r\n\r\n    return interactions.map(([key, count]) => ({\r\n      interaction: key.replace('interaction_', ''),\r\n      count\r\n    }));\r\n  }\r\n\r\n  _getPerformanceTrends() {\r\n    const trends = {};\r\n    \r\n    for (const [metricName, values] of this.performanceMetrics.entries()) {\r\n      if (values.length >= 3) {\r\n        const recent = values.slice(-3);\r\n        const trend = recent[recent.length - 1].value - recent[0].value;\r\n        trends[metricName] = {\r\n          trend: trend > 0 ? 'increasing' : 'decreasing',\r\n          magnitude: Math.abs(trend),\r\n          latest: recent[recent.length - 1].value\r\n        };\r\n      }\r\n    }\r\n    \r\n    return trends;\r\n  }\r\n\r\n  _flushEvents() {\r\n    // In a real implementation, send events to analytics service\r\n    console.log('Flushing analytics events:', this.events.length);\r\n    \r\n    // Clear events after sending\r\n    this.events = [];\r\n  }\r\n}\r\n\r\n// Singleton instance\r\nexport const waveformAnalytics = new WaveformAnalytics();\r\n\r\n/**\r\n * React hook for analytics tracking\r\n */\r\nexport const useWaveformAnalytics = () => {\r\n  return {\r\n    trackEvent: waveformAnalytics.trackEvent.bind(waveformAnalytics),\r\n    trackPerformance: waveformAnalytics.trackPerformance.bind(waveformAnalytics),\r\n    trackInteraction: waveformAnalytics.trackInteraction.bind(waveformAnalytics),\r\n    trackChopActivity: waveformAnalytics.trackChopActivity.bind(waveformAnalytics),\r\n    trackNavigation: waveformAnalytics.trackNavigation.bind(waveformAnalytics),\r\n    trackError: waveformAnalytics.trackError.bind(waveformAnalytics),\r\n    trackFeatureUsage: waveformAnalytics.trackFeatureUsage.bind(waveformAnalytics),\r\n    getSummary: waveformAnalytics.getAnalyticsSummary.bind(waveformAnalytics)\r\n  };\r\n};"],"names":["DEFAULT_FLAGS","waveformVisualization","enabled","rolloutPercentage","description","webAudioAnalysis","requirements","videoFrameAnalysis","dragChopCreation","zeroCrossingDetection","smartSnapping","visualEnhancements","frequencyAnalysis","webWorkerAnalysis","offscreenCanvas","audioWorkletAnalysis","aiPoweredChopSuggestions","performanceMonitoring","debugVisualization","waveformFeatureFlags","constructor","this","flags","userSegment","_determineUserSegment","deviceCapabilities","_detectDeviceCapabilities","overrides","_loadOverrides","_applyOverrides","isEnabled","featureName","flag","_checkRequirements","_isInRollout","getEnabledFeatures","Object","keys","filter","getFeatureDetails","requirementsMet","inRollout","override","_saveOverrides","clearOverrides","getSummary","enabledFeatures","totalFeatures","length","enabledCount","flagDetails","fromEntries","map","name","userId","_getUserId","segmentValue","_hashString","webAudioSupport","window","webWorkerSupport","offscreenCanvasSupport","audioWorkletSupport","canvasSupport","highPerformanceDevice","_isHighPerformanceDevice","experimentalFeatures","_allowExperimentalFeatures","hardwareConcurrency","navigator","deviceMemory","isMobile","test","userAgent","localStorage","getItem","every","requirement","Date","now","Math","random","toString","substr","setItem","str","hash","i","charCodeAt","abs","JSON","parse","error","stringify","entries","useWaveformFeatureFlag","setIsEnabled","React","useState","useEffect","checkFlag","addEventListener","removeEventListener","waveformAnalytics","sessionId","_generateSessionId","events","performanceMetrics","Map","userBehaviorPatterns","_checkAnalyticsConsent","trackEvent","eventType","eventData","event","timestamp","type","data","viewport","width","innerWidth","height","innerHeight","push","_processEvent","_flushEvents","trackPerformance","metricName","value","metadata","metric","has","set","get","_analyzePerformanceTrend","trackWaveformGeneration","analysisMethod","duration","audioLength","quality","generationTime","efficiency","trackInteraction","interactionType","details","patternKey","currentCount","trackChopActivity","activity","chopData","chopDuration","chopPosition","startTime","creationMethod","snapUsed","trackNavigation","action","zoomLevel","timeRange","start","end","trackError","errorType","errorMessage","context","recoveryAttempted","recoverySuccessful","trackFeatureUsage","usageContext","adoptionKey","currentUsage","getAnalyticsSummary","totalEvents","Array","from","key","values","count","average","reduce","sum","v","latest","topInteractions","_getTopInteractions","performanceTrends","_getPerformanceTrends","exportAnalyticsData","exportedAt","_analyzeGenerationPerformance","_analyzeInteractionPattern","_analyzeErrorPattern","recentGenerations","e","slice","recentInteractions","timeSpan","metrics","recent","trend","startsWith","sort","a","b","interaction","replace","trends","magnitude","useWaveformAnalytics","bind"],"mappings":"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"}