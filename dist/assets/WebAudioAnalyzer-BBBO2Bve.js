class e{constructor(e={}){this.audioContext=null,this.analyserNode=null,this.sourceNode=null,this.isAnalyzing=!1,this.sampleRate=e.sampleRate||44100,this.fftSize=e.fftSize||2048,this.smoothingTimeConstant=e.smoothingTimeConstant||.8,this.waveformData=new Float32Array(0),this.progressiveBuffer=[],this.analysisCallbacks=new Set,this.progressCallbacks=new Set,this.lastAnalysisTime=0,this.analysisFrameCount=0,this.performanceMetrics={averageAnalysisTime:0,droppedFrames:0,memoryUsage:0}}async initialize(){try{return this.audioContext=new(window.AudioContext||window.webkitAudioContext)({sampleRate:this.sampleRate,latencyHint:"interactive"}),"suspended"===this.audioContext.state&&await this.audioContext.resume(),this.analyserNode=this.audioContext.createAnalyser(),this.analyserNode.fftSize=this.fftSize,this.analyserNode.smoothingTimeConstant=this.smoothingTimeConstant,this.analyserNode.minDecibels=-90,this.analyserNode.maxDecibels=-10,!0}catch(e){throw new Error(`Web Audio API initialization failed: ${e.message}`)}}async connectToYouTubeStream(e){if(!this.audioContext||!this.analyserNode)throw new Error("WebAudioAnalyzer not initialized");try{const t=await this._attemptDirectAudioCapture(e);if(t)return await this._connectAudioStream(t);const a=await this._getMediaElement(e);return a?await this._connectMediaElement(a):await this._setupProgressiveAnalysis(e)}catch(t){throw new Error(`YouTube audio connection failed: ${t.message}`)}}startAnalysis(){this.analyserNode&&!this.isAnalyzing&&(this.isAnalyzing=!0,this.analysisFrameCount=0,this.lastAnalysisTime=performance.now(),requestAnimationFrame(()=>this._analysisLoop()))}stopAnalysis(){this.isAnalyzing=!1,this.sourceNode&&(this.sourceNode.disconnect(),this.sourceNode=null)}getFrequencyData(){if(!this.analyserNode)return null;const e=this.analyserNode.frequencyBinCount,t=new Uint8Array(e);return this.analyserNode.getByteFrequencyData(t),{data:t,sampleRate:this.audioContext.sampleRate,bufferLength:e,nyquistFrequency:this.audioContext.sampleRate/2}}getAmplitudeData(){if(!this.analyserNode)return null;const e=this.analyserNode.fftSize,t=new Uint8Array(e);return this.analyserNode.getByteTimeDomainData(t),{data:t,sampleRate:this.audioContext.sampleRate,bufferLength:e}}async generateProgressiveWaveform(e,t=1e3){const a=Math.floor(e*t),s=new Float32Array(a),i=Math.floor(t/60);let n=0;return new Promise(r=>{const o=()=>{const l=Math.min(n+i,a);for(let e=n;e<l;e++){const t=this.getAmplitudeData();if(t){const a=this._calculateAverageAmplitude(t.data);s[e]=(a-128)/128}else s[e]=0}n=l;const c=n/a;this.progressCallbacks.forEach(e=>{try{e(c,s.slice(0,n))}catch(t){}}),n<a?requestAnimationFrame(o):r({samples:s,sampleRate:t,duration:e,channels:1,metadata:{analysisMethod:"web-audio-progressive",quality:"high",generatedAt:Date.now(),sourceInfo:{contextSampleRate:this.audioContext?.sampleRate,fftSize:this.fftSize}}})};o()})}onAnalysisUpdate(e){return this.analysisCallbacks.add(e),()=>this.analysisCallbacks.delete(e)}onProgressUpdate(e){return this.progressCallbacks.add(e),()=>this.progressCallbacks.delete(e)}getPerformanceMetrics(){return{...this.performanceMetrics}}dispose(){this.stopAnalysis(),this.audioContext&&"closed"!==this.audioContext.state&&this.audioContext.close(),this.analysisCallbacks.clear(),this.progressCallbacks.clear(),this.waveformData=null,this.progressiveBuffer=null}_analysisLoop(){if(!this.isAnalyzing)return;const e=performance.now();try{const t=this.getFrequencyData(),a=this.getAmplitudeData();t&&a&&this.analysisCallbacks.forEach(e=>{try{e({frequency:t,amplitude:a,timestamp:this.audioContext.currentTime})}catch(s){}}),this.analysisFrameCount++;const s=performance.now()-e;this.performanceMetrics.averageAnalysisTime=(this.performanceMetrics.averageAnalysisTime*(this.analysisFrameCount-1)+s)/this.analysisFrameCount,s>16&&this.performanceMetrics.droppedFrames++}catch(t){this.performanceMetrics.droppedFrames++}this.isAnalyzing&&requestAnimationFrame(()=>this._analysisLoop())}async _attemptDirectAudioCapture(e){try{if(!e.getIframe())return null;return await navigator.mediaDevices.getDisplayMedia({audio:!0,video:!1})}catch(t){return null}}async _getMediaElement(e){try{return null}catch(t){return null}}async _connectAudioStream(e){try{return this.sourceNode=this.audioContext.createMediaStreamSource(e),this.sourceNode.connect(this.analyserNode),!0}catch(t){return!1}}async _connectMediaElement(e){try{return this.sourceNode=this.audioContext.createMediaElementSource(e),this.sourceNode.connect(this.analyserNode),this.analyserNode.connect(this.audioContext.destination),!0}catch(t){return!1}}async _setupProgressiveAnalysis(e){try{const e=this.audioContext.createOscillator(),t=this.audioContext.createGain();return e.connect(t),t.connect(this.analyserNode),t.gain.setValueAtTime(.01,this.audioContext.currentTime),e.frequency.setValueAtTime(440,this.audioContext.currentTime),e.start(),this.sourceNode=e,!0}catch(t){throw new Error(`Failed to setup progressive analysis: ${t.message}`)}}_calculateAverageAmplitude(e){let t=0;for(let a=0;a<e.length;a++)t+=e[a];return t/e.length}}export{e as WebAudioAnalyzer,e as default};
