{"version":3,"file":"waveform-advanced-C_AaKX5q.js","sources":["../../src/components/waveform/VisualEnhancementEngine.js","../../src/components/waveform/EnhancedCanvasRenderer.js","../../src/services/WaveformPerformanceOptimizer.js"],"sourcesContent":["/**\r\n * Visual Enhancement Engine for Waveform Visualization\r\n * Implements color coding, accessibility features, and visual settings\r\n * Requirements: 8.1, 8.2, 8.3, 8.4, 8.5\r\n */\r\n\r\nexport class VisualEnhancementEngine {\r\n  constructor(options = {}) {\r\n    this.options = {\r\n      enableFrequencyColorCoding: true,\r\n      enableAmplitudeColorCoding: true,\r\n      enableStructureDetection: true,\r\n      enableAccessibilityMode: false,\r\n      enableHighContrastMode: false,\r\n      colorScheme: 'default', // 'default', 'high-contrast', 'colorblind-friendly'\r\n      ...options\r\n    };\r\n\r\n    // Color schemes for different frequency ranges\r\n    this.frequencyColorSchemes = {\r\n      default: {\r\n        bass: { r: 220, g: 38, b: 127 },      // Deep pink for bass (20-250 Hz)\r\n        lowMid: { r: 239, g: 68, b: 68 },     // Red for low-mid (250-500 Hz)\r\n        mid: { r: 245, g: 158, b: 11 },       // Orange for mid (500-2000 Hz)\r\n        highMid: { r: 34, g: 197, b: 94 },    // Green for high-mid (2-8 kHz)\r\n        treble: { r: 59, g: 130, b: 246 }     // Blue for treble (8+ kHz)\r\n      },\r\n      'high-contrast': {\r\n        bass: { r: 255, g: 255, b: 255 },     // White\r\n        lowMid: { r: 255, g: 255, b: 0 },     // Yellow\r\n        mid: { r: 255, g: 0, b: 255 },        // Magenta\r\n        highMid: { r: 0, g: 255, b: 255 },    // Cyan\r\n        treble: { r: 0, g: 0, b: 0 }          // Black\r\n      },\r\n      'colorblind-friendly': {\r\n        bass: { r: 0, g: 114, b: 178 },       // Blue\r\n        lowMid: { r: 230, g: 159, b: 0 },     // Orange\r\n        mid: { r: 0, g: 158, b: 115 },        // Bluish green\r\n        highMid: { r: 204, g: 121, b: 167 },  // Reddish purple\r\n        treble: { r: 86, g: 180, b: 233 }     // Sky blue\r\n      }\r\n    };\r\n\r\n    // Amplitude-based color intensity mapping\r\n    this.amplitudeColorMap = {\r\n      silent: { alpha: 0.1, brightness: 0.3 },      // Very quiet sections\r\n      quiet: { alpha: 0.3, brightness: 0.5 },       // Quiet sections\r\n      moderate: { alpha: 0.6, brightness: 0.7 },    // Normal levels\r\n      loud: { alpha: 0.8, brightness: 0.9 },        // Loud sections\r\n      peak: { alpha: 1.0, brightness: 1.0 }         // Peak levels\r\n    };\r\n\r\n    // Song structure detection patterns\r\n    this.structurePatterns = {\r\n      verse: { \r\n        color: { r: 100, g: 149, b: 237 }, \r\n        pattern: 'solid',\r\n        description: 'Verse section'\r\n      },\r\n      chorus: { \r\n        color: { r: 255, g: 215, b: 0 }, \r\n        pattern: 'gradient',\r\n        description: 'Chorus section'\r\n      },\r\n      bridge: { \r\n        color: { r: 147, g: 112, b: 219 }, \r\n        pattern: 'dashed',\r\n        description: 'Bridge section'\r\n      },\r\n      intro: { \r\n        color: { r: 60, g: 179, b: 113 }, \r\n        pattern: 'dotted',\r\n        description: 'Intro section'\r\n      },\r\n      outro: { \r\n        color: { r: 205, g: 92, b: 92 }, \r\n        pattern: 'dotted',\r\n        description: 'Outro section'\r\n      },\r\n      break: { \r\n        color: { r: 255, g: 140, b: 0 }, \r\n        pattern: 'sparse',\r\n        description: 'Break/Drop section'\r\n      }\r\n    };\r\n\r\n    // Accessibility patterns for non-color visual cues\r\n    this.accessibilityPatterns = {\r\n      bass: { pattern: 'vertical-lines', density: 'high' },\r\n      lowMid: { pattern: 'diagonal-lines', density: 'medium' },\r\n      mid: { pattern: 'dots', density: 'medium' },\r\n      highMid: { pattern: 'horizontal-lines', density: 'low' },\r\n      treble: { pattern: 'cross-hatch', density: 'sparse' }\r\n    };\r\n\r\n    this.cache = new Map();\r\n  }\r\n\r\n  /**\r\n   * Apply frequency-based color coding to waveform data\r\n   * Requirement 8.1: Color coding for different frequency ranges\r\n   */\r\n  applyFrequencyColorCoding(waveformData, frequencyData) {\r\n    if (!this.options.enableFrequencyColorCoding || !frequencyData) {\r\n      return this.getDefaultWaveformColors();\r\n    }\r\n\r\n    const cacheKey = `freq-${waveformData.duration}-${this.options.colorScheme}`;\r\n    if (this.cache.has(cacheKey)) {\r\n      return this.cache.get(cacheKey);\r\n    }\r\n\r\n    const colorScheme = this.frequencyColorSchemes[this.options.colorScheme] || \r\n                       this.frequencyColorSchemes.default;\r\n    \r\n    const coloredSegments = [];\r\n    const segmentSize = Math.floor(frequencyData.length / 100); // 100 segments for performance\r\n\r\n    for (let i = 0; i < 100; i++) {\r\n      const startIdx = i * segmentSize;\r\n      const endIdx = Math.min((i + 1) * segmentSize, frequencyData.length);\r\n      \r\n      // Analyze frequency content in this segment\r\n      const frequencyProfile = this.analyzeFrequencyContent(\r\n        frequencyData.slice(startIdx, endIdx)\r\n      );\r\n      \r\n      // Generate color based on dominant frequency\r\n      const dominantColor = this.getDominantFrequencyColor(frequencyProfile, colorScheme);\r\n      \r\n      coloredSegments.push({\r\n        startTime: (i / 100) * waveformData.duration,\r\n        endTime: ((i + 1) / 100) * waveformData.duration,\r\n        color: dominantColor,\r\n        frequencyProfile\r\n      });\r\n    }\r\n\r\n    this.cache.set(cacheKey, coloredSegments);\r\n    return coloredSegments;\r\n  }\r\n\r\n  /**\r\n   * Apply amplitude-based color intensity\r\n   * Requirement 8.1: Color coding for amplitude levels\r\n   */\r\n  applyAmplitudeColorCoding(waveformData) {\r\n    if (!this.options.enableAmplitudeColorCoding) {\r\n      return null;\r\n    }\r\n\r\n    const { samples } = waveformData;\r\n    if (!samples) return null;\r\n\r\n    const amplitudeSegments = [];\r\n    const segmentSize = Math.floor(samples.length / 200); // 200 segments\r\n\r\n    for (let i = 0; i < 200; i++) {\r\n      const startIdx = i * segmentSize;\r\n      const endIdx = Math.min((i + 1) * segmentSize, samples.length);\r\n      \r\n      // Calculate RMS amplitude for this segment\r\n      const rms = this.calculateRMS(samples.slice(startIdx, endIdx));\r\n      const amplitudeLevel = this.categorizeAmplitude(rms);\r\n      \r\n      amplitudeSegments.push({\r\n        startTime: (startIdx / samples.length) * waveformData.duration,\r\n        endTime: (endIdx / samples.length) * waveformData.duration,\r\n        amplitude: rms,\r\n        level: amplitudeLevel,\r\n        colorModifier: this.amplitudeColorMap[amplitudeLevel]\r\n      });\r\n    }\r\n\r\n    return amplitudeSegments;\r\n  }\r\n\r\n  /**\r\n   * Detect song structure and add visual cues\r\n   * Requirement 8.2: Visual cues for song structure detection\r\n   */\r\n  detectSongStructure(waveformData, metadata = {}) {\r\n    if (!this.options.enableStructureDetection) {\r\n      return [];\r\n    }\r\n\r\n    const cacheKey = `structure-${waveformData.duration}-${JSON.stringify(metadata)}`;\r\n    if (this.cache.has(cacheKey)) {\r\n      return this.cache.get(cacheKey);\r\n    }\r\n\r\n    const { samples, duration } = waveformData;\r\n    if (!samples || !duration) return [];\r\n\r\n    const structureSections = [];\r\n    \r\n    // Analyze energy patterns to detect sections\r\n    const energyProfile = this.analyzeEnergyProfile(samples, duration);\r\n    const sections = this.identifyStructuralSections(energyProfile, duration, metadata);\r\n    \r\n    sections.forEach(section => {\r\n      const pattern = this.structurePatterns[section.type] || this.structurePatterns.verse;\r\n      \r\n      structureSections.push({\r\n        ...section,\r\n        visualPattern: pattern,\r\n        accessibilityLabel: pattern.description\r\n      });\r\n    });\r\n\r\n    this.cache.set(cacheKey, structureSections);\r\n    return structureSections;\r\n  }\r\n\r\n  /**\r\n   * Apply high contrast mode for accessibility\r\n   * Requirement 8.3: High contrast mode and alternative visual representations\r\n   */\r\n  applyHighContrastMode(colorData) {\r\n    if (!this.options.enableHighContrastMode) {\r\n      return colorData;\r\n    }\r\n\r\n    return colorData.map(segment => ({\r\n      ...segment,\r\n      color: this.convertToHighContrast(segment.color),\r\n      strokeWidth: Math.max(segment.strokeWidth || 1, 2),\r\n      shadowBlur: 4,\r\n      shadowColor: 'rgba(0, 0, 0, 0.8)'\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Generate accessibility patterns for non-color visual cues\r\n   * Requirement 8.3: Alternative visual representations for accessibility\r\n   */\r\n  generateAccessibilityPatterns(frequencyData) {\r\n    if (!this.options.enableAccessibilityMode) {\r\n      return null;\r\n    }\r\n\r\n    const patterns = [];\r\n    const segmentSize = Math.floor(frequencyData.length / 50);\r\n\r\n    for (let i = 0; i < 50; i++) {\r\n      const startIdx = i * segmentSize;\r\n      const endIdx = Math.min((i + 1) * segmentSize, frequencyData.length);\r\n      \r\n      const frequencyProfile = this.analyzeFrequencyContent(\r\n        frequencyData.slice(startIdx, endIdx)\r\n      );\r\n      \r\n      const dominantFreq = this.getDominantFrequency(frequencyProfile);\r\n      const pattern = this.accessibilityPatterns[dominantFreq];\r\n      \r\n      patterns.push({\r\n        startTime: (i / 50) * (frequencyData.length / 44100), // Assume 44.1kHz\r\n        endTime: ((i + 1) / 50) * (frequencyData.length / 44100),\r\n        pattern: pattern.pattern,\r\n        density: pattern.density,\r\n        frequencyType: dominantFreq\r\n      });\r\n    }\r\n\r\n    return patterns;\r\n  }\r\n\r\n  /**\r\n   * Create configurable visual settings with real-time preview\r\n   * Requirement 8.4, 8.5: Configurable visual settings with real-time preview\r\n   */\r\n  createVisualSettings() {\r\n    return {\r\n      // Color coding settings\r\n      frequencyColorCoding: {\r\n        enabled: this.options.enableFrequencyColorCoding,\r\n        colorScheme: this.options.colorScheme,\r\n        intensity: 0.8,\r\n        blendMode: 'normal'\r\n      },\r\n      \r\n      amplitudeColorCoding: {\r\n        enabled: this.options.enableAmplitudeColorCoding,\r\n        sensitivity: 0.7,\r\n        dynamicRange: true\r\n      },\r\n      \r\n      // Structure detection settings\r\n      structureDetection: {\r\n        enabled: this.options.enableStructureDetection,\r\n        sensitivity: 0.6,\r\n        showLabels: true,\r\n        showPatterns: true\r\n      },\r\n      \r\n      // Accessibility settings\r\n      accessibility: {\r\n        highContrastMode: this.options.enableHighContrastMode,\r\n        alternativePatterns: this.options.enableAccessibilityMode,\r\n        textSize: 'medium',\r\n        reducedMotion: false\r\n      },\r\n      \r\n      // Visual enhancement settings\r\n      enhancements: {\r\n        gradientFill: true,\r\n        shadowEffects: false,\r\n        animatedElements: true,\r\n        particleEffects: false\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update visual settings with real-time preview\r\n   */\r\n  updateVisualSettings(newSettings, previewCallback) {\r\n    const oldSettings = { ...this.options };\r\n    \r\n    // Apply new settings\r\n    Object.assign(this.options, {\r\n      enableFrequencyColorCoding: newSettings.frequencyColorCoding?.enabled ?? this.options.enableFrequencyColorCoding,\r\n      enableAmplitudeColorCoding: newSettings.amplitudeColorCoding?.enabled ?? this.options.enableAmplitudeColorCoding,\r\n      enableStructureDetection: newSettings.structureDetection?.enabled ?? this.options.enableStructureDetection,\r\n      enableHighContrastMode: newSettings.accessibility?.highContrastMode ?? this.options.enableHighContrastMode,\r\n      enableAccessibilityMode: newSettings.accessibility?.alternativePatterns ?? this.options.enableAccessibilityMode,\r\n      colorScheme: newSettings.frequencyColorCoding?.colorScheme ?? this.options.colorScheme\r\n    });\r\n    \r\n    // Clear cache to force regeneration\r\n    this.cache.clear();\r\n    \r\n    // Trigger preview callback if provided\r\n    if (previewCallback && typeof previewCallback === 'function') {\r\n      try {\r\n        previewCallback(this.options, oldSettings);\r\n      } catch (error) {\r\n        console.error('Error in visual settings preview callback:', error);\r\n        // Revert settings on error\r\n        Object.assign(this.options, oldSettings);\r\n      }\r\n    }\r\n    \r\n    return this.options;\r\n  }\r\n\r\n  // Helper methods\r\n\r\n  analyzeFrequencyContent(frequencyData) {\r\n    const bassEnergy = this.calculateBandEnergy(frequencyData, 0, 10);      // 20-250 Hz\r\n    const lowMidEnergy = this.calculateBandEnergy(frequencyData, 10, 20);   // 250-500 Hz\r\n    const midEnergy = this.calculateBandEnergy(frequencyData, 20, 80);      // 500-2000 Hz\r\n    const highMidEnergy = this.calculateBandEnergy(frequencyData, 80, 160); // 2-8 kHz\r\n    const trebleEnergy = this.calculateBandEnergy(frequencyData, 160, 255); // 8+ kHz\r\n    \r\n    return { bassEnergy, lowMidEnergy, midEnergy, highMidEnergy, trebleEnergy };\r\n  }\r\n\r\n  calculateBandEnergy(frequencyData, startBin, endBin) {\r\n    let energy = 0;\r\n    for (let i = startBin; i <= Math.min(endBin, frequencyData.length - 1); i++) {\r\n      energy += frequencyData[i] * frequencyData[i];\r\n    }\r\n    return Math.sqrt(energy / (endBin - startBin + 1));\r\n  }\r\n\r\n  getDominantFrequencyColor(frequencyProfile, colorScheme) {\r\n    const { bassEnergy, lowMidEnergy, midEnergy, highMidEnergy, trebleEnergy } = frequencyProfile;\r\n    \r\n    // Find dominant frequency range\r\n    const energies = { bassEnergy, lowMidEnergy, midEnergy, highMidEnergy, trebleEnergy };\r\n    const dominantRange = Object.keys(energies).reduce((a, b) => \r\n      energies[a] > energies[b] ? a : b\r\n    );\r\n    \r\n    // Map to color scheme\r\n    const colorMap = {\r\n      bassEnergy: colorScheme.bass,\r\n      lowMidEnergy: colorScheme.lowMid,\r\n      midEnergy: colorScheme.mid,\r\n      highMidEnergy: colorScheme.highMid,\r\n      trebleEnergy: colorScheme.treble\r\n    };\r\n    \r\n    const baseColor = colorMap[dominantRange];\r\n    const intensity = energies[dominantRange] / 255; // Normalize to 0-1\r\n    \r\n    return {\r\n      r: Math.round(baseColor.r * intensity),\r\n      g: Math.round(baseColor.g * intensity),\r\n      b: Math.round(baseColor.b * intensity),\r\n      a: Math.min(0.8, intensity)\r\n    };\r\n  }\r\n\r\n  getDominantFrequency(frequencyProfile) {\r\n    const { bassEnergy, lowMidEnergy, midEnergy, highMidEnergy, trebleEnergy } = frequencyProfile;\r\n    const energies = { bass: bassEnergy, lowMid: lowMidEnergy, mid: midEnergy, highMid: highMidEnergy, treble: trebleEnergy };\r\n    \r\n    return Object.keys(energies).reduce((a, b) => energies[a] > energies[b] ? a : b);\r\n  }\r\n\r\n  calculateRMS(samples) {\r\n    if (!samples || samples.length === 0) return 0;\r\n    \r\n    let sum = 0;\r\n    for (let i = 0; i < samples.length; i++) {\r\n      sum += samples[i] * samples[i];\r\n    }\r\n    return Math.sqrt(sum / samples.length);\r\n  }\r\n\r\n  categorizeAmplitude(rms) {\r\n    if (rms < 0.01) return 'silent';\r\n    if (rms < 0.1) return 'quiet';\r\n    if (rms < 0.5) return 'moderate';\r\n    if (rms < 0.8) return 'loud';\r\n    return 'peak';\r\n  }\r\n\r\n  analyzeEnergyProfile(samples, duration) {\r\n    const windowSize = Math.floor(samples.length / 100); // 100 windows\r\n    const energyProfile = [];\r\n    \r\n    for (let i = 0; i < 100; i++) {\r\n      const start = i * windowSize;\r\n      const end = Math.min((i + 1) * windowSize, samples.length);\r\n      const windowSamples = samples.slice(start, end);\r\n      \r\n      const rms = this.calculateRMS(windowSamples);\r\n      const spectralCentroid = this.calculateSpectralCentroid(windowSamples);\r\n      \r\n      energyProfile.push({\r\n        time: (i / 100) * duration,\r\n        energy: rms,\r\n        spectralCentroid,\r\n        variance: this.calculateVariance(windowSamples)\r\n      });\r\n    }\r\n    \r\n    return energyProfile;\r\n  }\r\n\r\n  identifyStructuralSections(energyProfile, duration, metadata) {\r\n    const sections = [];\r\n    let currentSection = null;\r\n    \r\n    // Simple structure detection based on energy patterns\r\n    energyProfile.forEach((window, index) => {\r\n      const sectionType = this.classifySection(window, energyProfile, index);\r\n      \r\n      if (!currentSection || currentSection.type !== sectionType) {\r\n        if (currentSection) {\r\n          currentSection.endTime = window.time;\r\n          sections.push(currentSection);\r\n        }\r\n        \r\n        currentSection = {\r\n          type: sectionType,\r\n          startTime: window.time,\r\n          endTime: duration,\r\n          confidence: 0.7 // Basic confidence score\r\n        };\r\n      }\r\n    });\r\n    \r\n    if (currentSection) {\r\n      sections.push(currentSection);\r\n    }\r\n    \r\n    return sections;\r\n  }\r\n\r\n  classifySection(window, energyProfile, index) {\r\n    const { energy, spectralCentroid, variance } = window;\r\n    \r\n    // Simple heuristics for section classification\r\n    if (index < 5) return 'intro';\r\n    if (index > energyProfile.length - 5) return 'outro';\r\n    \r\n    if (energy > 0.7 && spectralCentroid > 0.6) return 'chorus';\r\n    if (energy < 0.3 && variance < 0.2) return 'break';\r\n    if (spectralCentroid < 0.4 && variance > 0.5) return 'bridge';\r\n    \r\n    return 'verse';\r\n  }\r\n\r\n  calculateSpectralCentroid(samples) {\r\n    // Simplified spectral centroid calculation\r\n    let weightedSum = 0;\r\n    let magnitudeSum = 0;\r\n    \r\n    for (let i = 0; i < samples.length; i++) {\r\n      const magnitude = Math.abs(samples[i]);\r\n      weightedSum += i * magnitude;\r\n      magnitudeSum += magnitude;\r\n    }\r\n    \r\n    return magnitudeSum > 0 ? (weightedSum / magnitudeSum) / samples.length : 0;\r\n  }\r\n\r\n  calculateVariance(samples) {\r\n    if (samples.length === 0) return 0;\r\n    \r\n    const mean = samples.reduce((sum, val) => sum + val, 0) / samples.length;\r\n    const variance = samples.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / samples.length;\r\n    \r\n    return Math.sqrt(variance);\r\n  }\r\n\r\n  convertToHighContrast(color) {\r\n    const { r, g, b, a } = color;\r\n    const luminance = 0.299 * r + 0.587 * g + 0.114 * b;\r\n    \r\n    // Convert to high contrast black or white based on luminance\r\n    if (luminance > 128) {\r\n      return { r: 255, g: 255, b: 255, a: a || 1 };\r\n    } else {\r\n      return { r: 0, g: 0, b: 0, a: a || 1 };\r\n    }\r\n  }\r\n\r\n  getDefaultWaveformColors() {\r\n    return [{\r\n      startTime: 0,\r\n      endTime: Infinity,\r\n      color: { r: 6, g: 182, b: 212, a: 0.8 }\r\n    }];\r\n  }\r\n\r\n  destroy() {\r\n    this.cache.clear();\r\n  }\r\n}","/**\r\n * Enhanced Canvas Renderer with Visual Enhancements and Accessibility Features\r\n * Extends the base CanvasRenderer with color coding, structure detection, and accessibility\r\n * Requirements: 8.1, 8.2, 8.3, 8.4, 8.5\r\n */\r\n\r\nimport { CanvasRenderer } from './CanvasRenderer.js';\r\nimport { VisualEnhancementEngine } from './VisualEnhancementEngine.js';\r\n\r\nexport class EnhancedCanvasRenderer extends CanvasRenderer {\r\n  constructor(container, options = {}) {\r\n    super(container, options);\r\n    \r\n    // Initialize visual enhancement engine\r\n    this.visualEnhancementEngine = new VisualEnhancementEngine({\r\n      enableFrequencyColorCoding: options.enableFrequencyColorCoding !== false,\r\n      enableAmplitudeColorCoding: options.enableAmplitudeColorCoding !== false,\r\n      enableStructureDetection: options.enableStructureDetection !== false,\r\n      enableAccessibilityMode: options.enableAccessibilityMode || false,\r\n      enableHighContrastMode: options.enableHighContrastMode || false,\r\n      colorScheme: options.colorScheme || 'default'\r\n    });\r\n    \r\n    // Enhanced rendering state\r\n    this.frequencyColorData = null;\r\n    this.amplitudeColorData = null;\r\n    this.structureData = null;\r\n    this.accessibilityPatterns = null;\r\n    \r\n    // Pattern cache for accessibility features\r\n    this.patternCache = new Map();\r\n    \r\n    // Animation state for enhanced effects\r\n    this.animationState = {\r\n      time: 0,\r\n      pulsePhase: 0,\r\n      particleSystem: null\r\n    };\r\n    \r\n    this.initializeEnhancedFeatures();\r\n  }\r\n\r\n  /**\r\n   * Initialize enhanced rendering features\r\n   */\r\n  initializeEnhancedFeatures() {\r\n    // Create additional layers for enhanced features\r\n    this.layerManager.createLayer('frequency-overlay', 1.5, { alpha: true });\r\n    this.layerManager.createLayer('structure-overlay', 2.5, { alpha: true });\r\n    this.layerManager.createLayer('accessibility-patterns', 3.5, { alpha: true });\r\n    this.layerManager.createLayer('enhancements', 5.5, { alpha: true });\r\n    \r\n    // Initialize pattern cache for accessibility\r\n    this.initializeAccessibilityPatterns();\r\n    \r\n    // Start animation loop for enhanced effects\r\n    this.startEnhancementAnimationLoop();\r\n  }\r\n\r\n  /**\r\n   * Enhanced waveform rendering with visual enhancements\r\n   * Overrides base renderWaveform to add color coding and accessibility features\r\n   */\r\n  renderWaveform(waveformData, options = {}) {\r\n    // Call base rendering first\r\n    super.renderWaveform(waveformData, options);\r\n    \r\n    // Apply visual enhancements if enabled\r\n    if (this.visualEnhancementEngine) {\r\n      this.renderVisualEnhancements(waveformData, options);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render visual enhancements including color coding and structure detection\r\n   */\r\n  renderVisualEnhancements(waveformData, options = {}) {\r\n    const viewport = this.viewportManager.getViewportBounds();\r\n    const { width, height } = this.layerManager.getDimensions();\r\n    \r\n    // Generate enhanced visual data\r\n    this.generateEnhancedVisualData(waveformData, options);\r\n    \r\n    // Render frequency color coding\r\n    if (this.frequencyColorData && this.visualEnhancementEngine.options.enableFrequencyColorCoding) {\r\n      this.renderFrequencyColorOverlay(viewport, width, height);\r\n    }\r\n    \r\n    // Render amplitude color coding\r\n    if (this.amplitudeColorData && this.visualEnhancementEngine.options.enableAmplitudeColorCoding) {\r\n      this.renderAmplitudeColorOverlay(viewport, width, height);\r\n    }\r\n    \r\n    // Render song structure detection\r\n    if (this.structureData && this.visualEnhancementEngine.options.enableStructureDetection) {\r\n      this.renderStructureOverlay(viewport, width, height);\r\n    }\r\n    \r\n    // Render accessibility patterns\r\n    if (this.accessibilityPatterns && this.visualEnhancementEngine.options.enableAccessibilityMode) {\r\n      this.renderAccessibilityPatterns(viewport, width, height);\r\n    }\r\n    \r\n    // Apply high contrast mode if enabled\r\n    if (this.visualEnhancementEngine.options.enableHighContrastMode) {\r\n      this.applyHighContrastMode();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate enhanced visual data from waveform and frequency data\r\n   */\r\n  generateEnhancedVisualData(waveformData, options = {}) {\r\n    const { frequencyData } = options;\r\n    \r\n    // Generate frequency color coding\r\n    if (frequencyData) {\r\n      this.frequencyColorData = this.visualEnhancementEngine.applyFrequencyColorCoding(\r\n        waveformData, \r\n        frequencyData\r\n      );\r\n    }\r\n    \r\n    // Generate amplitude color coding\r\n    this.amplitudeColorData = this.visualEnhancementEngine.applyAmplitudeColorCoding(waveformData);\r\n    \r\n    // Detect song structure\r\n    this.structureData = this.visualEnhancementEngine.detectSongStructure(\r\n      waveformData, \r\n      options.metadata || {}\r\n    );\r\n    \r\n    // Generate accessibility patterns\r\n    if (frequencyData) {\r\n      this.accessibilityPatterns = this.visualEnhancementEngine.generateAccessibilityPatterns(frequencyData);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render frequency-based color overlay\r\n   * Requirement 8.1: Color coding for different frequency ranges\r\n   */\r\n  renderFrequencyColorOverlay(viewport, width, height) {\r\n    const layer = this.layerManager.getLayer('frequency-overlay');\r\n    if (!layer || !this.frequencyColorData) return;\r\n    \r\n    const { ctx } = layer;\r\n    this.layerManager.clearLayer('frequency-overlay');\r\n    \r\n    // Render frequency color segments\r\n    this.frequencyColorData.forEach(segment => {\r\n      if (segment.endTime < viewport.start || segment.startTime > viewport.end) return;\r\n      \r\n      const startX = this.viewportManager.timeToPixel(Math.max(segment.startTime, viewport.start));\r\n      const endX = this.viewportManager.timeToPixel(Math.min(segment.endTime, viewport.end));\r\n      const segmentWidth = endX - startX;\r\n      \r\n      if (segmentWidth <= 0) return;\r\n      \r\n      // Create frequency-based gradient\r\n      const gradient = this.createFrequencyGradient(ctx, startX, height, segment.color, segment.frequencyProfile);\r\n      \r\n      // Apply blend mode for color overlay\r\n      ctx.globalCompositeOperation = 'multiply';\r\n      ctx.fillStyle = gradient;\r\n      ctx.fillRect(startX, 0, segmentWidth, height);\r\n      ctx.globalCompositeOperation = 'source-over';\r\n    });\r\n    \r\n    this.layerManager.markLayerClean('frequency-overlay');\r\n  }\r\n\r\n  /**\r\n   * Create frequency-based gradient\r\n   */\r\n  createFrequencyGradient(ctx, x, height, color, frequencyProfile) {\r\n    const gradient = ctx.createLinearGradient(x, 0, x, height);\r\n    \r\n    // Map frequency ranges to gradient stops\r\n    const { bassEnergy, lowMidEnergy, midEnergy, highMidEnergy, trebleEnergy } = frequencyProfile;\r\n    const totalEnergy = bassEnergy + lowMidEnergy + midEnergy + highMidEnergy + trebleEnergy;\r\n    \r\n    if (totalEnergy === 0) {\r\n      gradient.addColorStop(0, `rgba(${color.r}, ${color.g}, ${color.b}, 0.1)`);\r\n      gradient.addColorStop(1, `rgba(${color.r}, ${color.g}, ${color.b}, 0.1)`);\r\n      return gradient;\r\n    }\r\n    \r\n    // Create gradient based on frequency distribution\r\n    let currentStop = 0;\r\n    \r\n    // Bass (bottom)\r\n    const bassRatio = bassEnergy / totalEnergy;\r\n    if (bassRatio > 0.1) {\r\n      gradient.addColorStop(currentStop, `rgba(220, 38, 127, ${bassRatio * color.a})`);\r\n      currentStop += bassRatio;\r\n    }\r\n    \r\n    // Low-mid\r\n    const lowMidRatio = lowMidEnergy / totalEnergy;\r\n    if (lowMidRatio > 0.1) {\r\n      gradient.addColorStop(Math.min(currentStop, 1), `rgba(239, 68, 68, ${lowMidRatio * color.a})`);\r\n      currentStop += lowMidRatio;\r\n    }\r\n    \r\n    // Mid (center)\r\n    const midRatio = midEnergy / totalEnergy;\r\n    if (midRatio > 0.1) {\r\n      gradient.addColorStop(Math.min(currentStop, 1), `rgba(245, 158, 11, ${midRatio * color.a})`);\r\n      currentStop += midRatio;\r\n    }\r\n    \r\n    // High-mid\r\n    const highMidRatio = highMidEnergy / totalEnergy;\r\n    if (highMidRatio > 0.1) {\r\n      gradient.addColorStop(Math.min(currentStop, 1), `rgba(34, 197, 94, ${highMidRatio * color.a})`);\r\n      currentStop += highMidRatio;\r\n    }\r\n    \r\n    // Treble (top)\r\n    const trebleRatio = trebleEnergy / totalEnergy;\r\n    if (trebleRatio > 0.1) {\r\n      gradient.addColorStop(1, `rgba(59, 130, 246, ${trebleRatio * color.a})`);\r\n    }\r\n    \r\n    return gradient;\r\n  }\r\n\r\n  /**\r\n   * Render amplitude-based color overlay\r\n   * Requirement 8.1: Color coding for amplitude levels\r\n   */\r\n  renderAmplitudeColorOverlay(viewport, width, height) {\r\n    const layer = this.layerManager.getLayer('frequency-overlay');\r\n    if (!layer || !this.amplitudeColorData) return;\r\n    \r\n    const { ctx } = layer;\r\n    \r\n    // Render amplitude color segments\r\n    this.amplitudeColorData.forEach(segment => {\r\n      if (segment.endTime < viewport.start || segment.startTime > viewport.end) return;\r\n      \r\n      const startX = this.viewportManager.timeToPixel(Math.max(segment.startTime, viewport.start));\r\n      const endX = this.viewportManager.timeToPixel(Math.min(segment.endTime, viewport.end));\r\n      const segmentWidth = endX - startX;\r\n      \r\n      if (segmentWidth <= 0) return;\r\n      \r\n      // Apply amplitude-based color modification\r\n      const { alpha, brightness } = segment.colorModifier;\r\n      \r\n      ctx.globalCompositeOperation = 'overlay';\r\n      ctx.globalAlpha = alpha;\r\n      \r\n      // Create amplitude-based color\r\n      const amplitudeColor = this.getAmplitudeLevelColor(segment.level, brightness);\r\n      ctx.fillStyle = amplitudeColor;\r\n      ctx.fillRect(startX, 0, segmentWidth, height);\r\n      \r\n      ctx.globalAlpha = 1.0;\r\n      ctx.globalCompositeOperation = 'source-over';\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get color for amplitude level\r\n   */\r\n  getAmplitudeLevelColor(level, brightness) {\r\n    const colors = {\r\n      silent: { r: 64, g: 64, b: 64 },      // Dark gray\r\n      quiet: { r: 100, g: 149, b: 237 },    // Blue\r\n      moderate: { r: 34, g: 197, b: 94 },   // Green\r\n      loud: { r: 245, g: 158, b: 11 },      // Orange\r\n      peak: { r: 239, g: 68, b: 68 }        // Red\r\n    };\r\n    \r\n    const color = colors[level] || colors.moderate;\r\n    return `rgba(${Math.round(color.r * brightness)}, ${Math.round(color.g * brightness)}, ${Math.round(color.b * brightness)}, 0.3)`;\r\n  }\r\n\r\n  /**\r\n   * Render song structure overlay\r\n   * Requirement 8.2: Visual cues for song structure detection\r\n   */\r\n  renderStructureOverlay(viewport, width, height) {\r\n    const layer = this.layerManager.getLayer('structure-overlay');\r\n    if (!layer || !this.structureData) return;\r\n    \r\n    const { ctx } = layer;\r\n    this.layerManager.clearLayer('structure-overlay');\r\n    \r\n    // Render structure sections\r\n    this.structureData.forEach(section => {\r\n      if (section.endTime < viewport.start || section.startTime > viewport.end) return;\r\n      \r\n      const startX = this.viewportManager.timeToPixel(Math.max(section.startTime, viewport.start));\r\n      const endX = this.viewportManager.timeToPixel(Math.min(section.endTime, viewport.end));\r\n      const sectionWidth = endX - startX;\r\n      \r\n      if (sectionWidth <= 0) return;\r\n      \r\n      // Render section background\r\n      this.renderStructureSection(ctx, section, startX, sectionWidth, height);\r\n      \r\n      // Render section label if enabled\r\n      if (this.visualEnhancementEngine.options.structureDetection?.showLabels) {\r\n        this.renderStructureLabel(ctx, section, startX, sectionWidth, height);\r\n      }\r\n    });\r\n    \r\n    this.layerManager.markLayerClean('structure-overlay');\r\n  }\r\n\r\n  /**\r\n   * Render individual structure section\r\n   */\r\n  renderStructureSection(ctx, section, startX, width, height) {\r\n    const { visualPattern } = section;\r\n    const { color, pattern } = visualPattern;\r\n    \r\n    // Set base color with low opacity\r\n    const baseColor = `rgba(${color.r}, ${color.g}, ${color.b}, 0.1)`;\r\n    \r\n    switch (pattern) {\r\n      case 'solid':\r\n        ctx.fillStyle = baseColor;\r\n        ctx.fillRect(startX, 0, width, height);\r\n        break;\r\n        \r\n      case 'gradient':\r\n        const gradient = ctx.createLinearGradient(startX, 0, startX + width, 0);\r\n        gradient.addColorStop(0, baseColor);\r\n        gradient.addColorStop(0.5, `rgba(${color.r}, ${color.g}, ${color.b}, 0.2)`);\r\n        gradient.addColorStop(1, baseColor);\r\n        ctx.fillStyle = gradient;\r\n        ctx.fillRect(startX, 0, width, height);\r\n        break;\r\n        \r\n      case 'dashed':\r\n        ctx.strokeStyle = `rgba(${color.r}, ${color.g}, ${color.b}, 0.4)`;\r\n        ctx.lineWidth = 2;\r\n        ctx.setLineDash([8, 4]);\r\n        ctx.strokeRect(startX, 10, width, height - 20);\r\n        ctx.setLineDash([]);\r\n        break;\r\n        \r\n      case 'dotted':\r\n        ctx.fillStyle = `rgba(${color.r}, ${color.g}, ${color.b}, 0.3)`;\r\n        for (let x = startX; x < startX + width; x += 12) {\r\n          for (let y = 10; y < height - 10; y += 12) {\r\n            ctx.beginPath();\r\n            ctx.arc(x, y, 2, 0, Math.PI * 2);\r\n            ctx.fill();\r\n          }\r\n        }\r\n        break;\r\n        \r\n      case 'sparse':\r\n        ctx.fillStyle = baseColor;\r\n        ctx.fillRect(startX, height * 0.4, width, height * 0.2);\r\n        break;\r\n        \r\n      default:\r\n        ctx.fillStyle = baseColor;\r\n        ctx.fillRect(startX, 0, width, height);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render structure section label\r\n   */\r\n  renderStructureLabel(ctx, section, startX, width, height) {\r\n    if (width < 60) return; // Too narrow for label\r\n    \r\n    const centerX = startX + width / 2;\r\n    const labelY = 25;\r\n    \r\n    // Prepare label text\r\n    const labelText = section.type.toUpperCase();\r\n    ctx.font = 'bold 12px monospace';\r\n    ctx.textAlign = 'center';\r\n    ctx.textBaseline = 'middle';\r\n    \r\n    // Measure text for background\r\n    const textMetrics = ctx.measureText(labelText);\r\n    const textWidth = textMetrics.width;\r\n    const padding = 6;\r\n    \r\n    // Draw label background\r\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\r\n    ctx.fillRect(centerX - textWidth / 2 - padding, labelY - 8, textWidth + padding * 2, 16);\r\n    \r\n    // Draw label border\r\n    const { color } = section.visualPattern;\r\n    ctx.strokeStyle = `rgba(${color.r}, ${color.g}, ${color.b}, 0.8)`;\r\n    ctx.lineWidth = 1;\r\n    ctx.strokeRect(centerX - textWidth / 2 - padding, labelY - 8, textWidth + padding * 2, 16);\r\n    \r\n    // Draw label text\r\n    ctx.fillStyle = `rgba(${color.r}, ${color.g}, ${color.b}, 1)`;\r\n    ctx.fillText(labelText, centerX, labelY);\r\n  }\r\n\r\n  /**\r\n   * Render accessibility patterns for non-color visual cues\r\n   * Requirement 8.3: Alternative visual representations for accessibility\r\n   */\r\n  renderAccessibilityPatterns(viewport, width, height) {\r\n    const layer = this.layerManager.getLayer('accessibility-patterns');\r\n    if (!layer || !this.accessibilityPatterns) return;\r\n    \r\n    const { ctx } = layer;\r\n    this.layerManager.clearLayer('accessibility-patterns');\r\n    \r\n    // Render accessibility patterns\r\n    this.accessibilityPatterns.forEach(patternSegment => {\r\n      if (patternSegment.endTime < viewport.start || patternSegment.startTime > viewport.end) return;\r\n      \r\n      const startX = this.viewportManager.timeToPixel(Math.max(patternSegment.startTime, viewport.start));\r\n      const endX = this.viewportManager.timeToPixel(Math.min(patternSegment.endTime, viewport.end));\r\n      const segmentWidth = endX - startX;\r\n      \r\n      if (segmentWidth <= 0) return;\r\n      \r\n      this.renderAccessibilityPattern(ctx, patternSegment, startX, segmentWidth, height);\r\n    });\r\n    \r\n    this.layerManager.markLayerClean('accessibility-patterns');\r\n  }\r\n\r\n  /**\r\n   * Render individual accessibility pattern\r\n   */\r\n  renderAccessibilityPattern(ctx, patternSegment, startX, width, height) {\r\n    const { pattern, density, frequencyType } = patternSegment;\r\n    \r\n    ctx.strokeStyle = 'rgba(255, 255, 255, 0.6)';\r\n    ctx.lineWidth = 1;\r\n    \r\n    const densityMap = { high: 4, medium: 8, low: 16, sparse: 32 };\r\n    const spacing = densityMap[density] || 8;\r\n    \r\n    switch (pattern) {\r\n      case 'vertical-lines':\r\n        for (let x = startX; x < startX + width; x += spacing) {\r\n          ctx.beginPath();\r\n          ctx.moveTo(x, 0);\r\n          ctx.lineTo(x, height);\r\n          ctx.stroke();\r\n        }\r\n        break;\r\n        \r\n      case 'horizontal-lines':\r\n        for (let y = 0; y < height; y += spacing) {\r\n          ctx.beginPath();\r\n          ctx.moveTo(startX, y);\r\n          ctx.lineTo(startX + width, y);\r\n          ctx.stroke();\r\n        }\r\n        break;\r\n        \r\n      case 'diagonal-lines':\r\n        for (let offset = -height; offset < width + height; offset += spacing) {\r\n          ctx.beginPath();\r\n          ctx.moveTo(startX + offset, 0);\r\n          ctx.lineTo(startX + offset + height, height);\r\n          ctx.stroke();\r\n        }\r\n        break;\r\n        \r\n      case 'dots':\r\n        ctx.fillStyle = 'rgba(255, 255, 255, 0.6)';\r\n        for (let x = startX; x < startX + width; x += spacing) {\r\n          for (let y = spacing / 2; y < height; y += spacing) {\r\n            ctx.beginPath();\r\n            ctx.arc(x, y, 1, 0, Math.PI * 2);\r\n            ctx.fill();\r\n          }\r\n        }\r\n        break;\r\n        \r\n      case 'cross-hatch':\r\n        // Vertical lines\r\n        for (let x = startX; x < startX + width; x += spacing) {\r\n          ctx.beginPath();\r\n          ctx.moveTo(x, 0);\r\n          ctx.lineTo(x, height);\r\n          ctx.stroke();\r\n        }\r\n        // Horizontal lines\r\n        for (let y = 0; y < height; y += spacing) {\r\n          ctx.beginPath();\r\n          ctx.moveTo(startX, y);\r\n          ctx.lineTo(startX + width, y);\r\n          ctx.stroke();\r\n        }\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Apply high contrast mode to all layers\r\n   * Requirement 8.3: High contrast mode for accessibility\r\n   */\r\n  applyHighContrastMode() {\r\n    // Apply high contrast filter to all layers\r\n    const layers = ['waveform', 'chops', 'frequency-overlay', 'structure-overlay'];\r\n    \r\n    layers.forEach(layerName => {\r\n      const layer = this.layerManager.getLayer(layerName);\r\n      if (layer && layer.canvas) {\r\n        const { ctx } = layer;\r\n        \r\n        // Apply high contrast filter\r\n        ctx.filter = 'contrast(200%) brightness(150%)';\r\n        \r\n        // Redraw layer content with high contrast\r\n        // This would typically involve re-rendering the layer content\r\n        // For now, we apply the filter to existing content\r\n        \r\n        // Reset filter\r\n        ctx.filter = 'none';\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initialize accessibility pattern cache\r\n   */\r\n  initializeAccessibilityPatterns() {\r\n    const patterns = ['vertical-lines', 'horizontal-lines', 'diagonal-lines', 'dots', 'cross-hatch'];\r\n    const densities = ['high', 'medium', 'low', 'sparse'];\r\n    \r\n    patterns.forEach(pattern => {\r\n      densities.forEach(density => {\r\n        const key = `${pattern}-${density}`;\r\n        // Pre-generate pattern data for performance\r\n        this.patternCache.set(key, this.generatePatternData(pattern, density));\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Generate pattern data for caching\r\n   */\r\n  generatePatternData(pattern, density) {\r\n    return {\r\n      pattern,\r\n      density,\r\n      spacing: { high: 4, medium: 8, low: 16, sparse: 32 }[density] || 8\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Start animation loop for enhanced effects\r\n   */\r\n  startEnhancementAnimationLoop() {\r\n    const animate = (timestamp) => {\r\n      this.animationState.time = timestamp;\r\n      this.animationState.pulsePhase = (timestamp / 1000) % (Math.PI * 2);\r\n      \r\n      // Update animated elements if enabled\r\n      if (this.visualEnhancementEngine.options.enhancements?.animatedElements) {\r\n        this.updateAnimatedElements();\r\n      }\r\n      \r\n      requestAnimationFrame(animate);\r\n    };\r\n    \r\n    requestAnimationFrame(animate);\r\n  }\r\n\r\n  /**\r\n   * Update animated elements\r\n   */\r\n  updateAnimatedElements() {\r\n    // Update any animated visual elements\r\n    // This could include pulsing effects, particle systems, etc.\r\n    \r\n    // Mark layers dirty if animations are active\r\n    if (this.animationState.pulsePhase % (Math.PI / 4) < 0.1) {\r\n      this.layerManager.markLayerDirty('enhancements');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update visual enhancement settings\r\n   */\r\n  updateVisualSettings(newSettings) {\r\n    if (this.visualEnhancementEngine) {\r\n      this.visualEnhancementEngine.updateVisualSettings(newSettings, () => {\r\n        // Clear cached data to force regeneration\r\n        this.frequencyColorData = null;\r\n        this.amplitudeColorData = null;\r\n        this.structureData = null;\r\n        this.accessibilityPatterns = null;\r\n        \r\n        // Mark layers dirty for re-rendering\r\n        this.layerManager.markLayerDirty('frequency-overlay');\r\n        this.layerManager.markLayerDirty('structure-overlay');\r\n        this.layerManager.markLayerDirty('accessibility-patterns');\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get visual enhancement engine for external access\r\n   */\r\n  getVisualEnhancementEngine() {\r\n    return this.visualEnhancementEngine;\r\n  }\r\n\r\n  /**\r\n   * Cleanup enhanced features\r\n   */\r\n  destroy() {\r\n    super.destroy();\r\n    \r\n    if (this.visualEnhancementEngine) {\r\n      this.visualEnhancementEngine.destroy();\r\n    }\r\n    \r\n    this.patternCache.clear();\r\n  }\r\n}","/**\r\n * Main performance optimization service that integrates Web Workers, caching, and memory management\r\n * Provides unified interface for all performance optimization features\r\n * Requirements: 7.2, 7.3, 7.4, 7.5\r\n */\r\n\r\nimport WaveformCache from './WaveformCache.js';\r\nimport WaveformMemoryManager from './WaveformMemoryManager.js';\r\nimport WaveformPerformanceMonitor from './WaveformPerformanceMonitor.js';\r\n\r\nexport class WaveformPerformanceOptimizer {\r\n  constructor(options = {}) {\r\n    this.options = {\r\n      enableWebWorkers: options.enableWebWorkers !== false,\r\n      enableCaching: options.enableCaching !== false,\r\n      enableMemoryManagement: options.enableMemoryManagement !== false,\r\n      enablePerformanceMonitoring: options.enablePerformanceMonitoring !== false,\r\n      workerPoolSize: options.workerPoolSize || 2,\r\n      ...options\r\n    };\r\n    \r\n    // Initialize components\r\n    this.cache = null;\r\n    this.memoryManager = null;\r\n    this.performanceMonitor = null;\r\n    this.workerPool = [];\r\n    this.workerQueue = [];\r\n    \r\n    // State tracking\r\n    this.isInitialized = false;\r\n    this.activeWorkerTasks = new Map();\r\n    this.taskIdCounter = 0;\r\n    \r\n    // Performance metrics\r\n    this.metrics = {\r\n      workerTasks: {\r\n        completed: 0,\r\n        failed: 0,\r\n        averageTime: 0,\r\n        queueLength: 0\r\n      },\r\n      cachePerformance: {\r\n        hits: 0,\r\n        misses: 0,\r\n        hitRate: 0\r\n      },\r\n      memoryOptimization: {\r\n        cleanupCount: 0,\r\n        memoryReclaimed: 0,\r\n        currentUsage: 0\r\n      },\r\n      overallPerformance: {\r\n        score: 1.0,\r\n        qualityLevel: 'high',\r\n        degradationLevel: 0\r\n      }\r\n    };\r\n    \r\n    this.initialize();\r\n  }\r\n\r\n  /**\r\n   * Initialize all performance optimization components\r\n   */\r\n  async initialize() {\r\n    if (this.isInitialized) return;\r\n    \r\n    try {\r\n      // Initialize caching system\r\n      if (this.options.enableCaching) {\r\n        this.cache = new WaveformCache({\r\n          maxMemorySize: this.options.cacheMaxMemory || 100 * 1024 * 1024,\r\n          maxCacheEntries: this.options.cacheMaxEntries || 50,\r\n          persistenceEnabled: this.options.cachePersistence !== false,\r\n          compressionEnabled: this.options.cacheCompression !== false\r\n        });\r\n        \r\n        await this.cache.initializePersistence();\r\n      }\r\n      \r\n      // Initialize memory management\r\n      if (this.options.enableMemoryManagement) {\r\n        this.memoryManager = new WaveformMemoryManager({\r\n          maxMemoryThreshold: this.options.memoryMaxThreshold || 150 * 1024 * 1024,\r\n          warningThreshold: this.options.memoryWarningThreshold || 100 * 1024 * 1024,\r\n          cleanupInterval: this.options.memoryCleanupInterval || 30 * 1000\r\n        });\r\n      }\r\n      \r\n      // Initialize performance monitoring\r\n      if (this.options.enablePerformanceMonitoring) {\r\n        this.performanceMonitor = new WaveformPerformanceMonitor({\r\n          targetFPS: this.options.targetFPS || 60,\r\n          minFPS: this.options.minFPS || 30,\r\n          degradationThreshold: this.options.degradationThreshold || 0.7,\r\n          recoveryThreshold: this.options.recoveryThreshold || 0.9\r\n        });\r\n        \r\n        // Set up performance monitoring callbacks\r\n        this.setupPerformanceCallbacks();\r\n        this.performanceMonitor.startMonitoring();\r\n      }\r\n      \r\n      // Initialize Web Worker pool\r\n      if (this.options.enableWebWorkers) {\r\n        await this.initializeWorkerPool();\r\n      }\r\n      \r\n      this.isInitialized = true;\r\n      console.log('WaveformPerformanceOptimizer initialized successfully');\r\n      \r\n    } catch (error) {\r\n      console.error('Failed to initialize WaveformPerformanceOptimizer:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialize Web Worker pool\r\n   */\r\n  async initializeWorkerPool() {\r\n    try {\r\n      // Handle test environment where import.meta.url might not be available\r\n      let workerScript;\r\n      try {\r\n        workerScript = new URL('../workers/WaveformWorker.js', import.meta.url);\r\n      } catch (error) {\r\n        // Fallback for test environment\r\n        workerScript = '../workers/WaveformWorker.js';\r\n      }\r\n      \r\n      for (let i = 0; i < this.options.workerPoolSize; i++) {\r\n        try {\r\n          const worker = new Worker(workerScript, { type: 'module' });\r\n          \r\n          worker.onmessage = (event) => {\r\n            this.handleWorkerMessage(worker, event);\r\n          };\r\n          \r\n          worker.onerror = (error) => {\r\n            this.handleWorkerError(worker, error);\r\n          };\r\n          \r\n          this.workerPool.push({\r\n            worker,\r\n            id: i,\r\n            busy: false,\r\n            currentTask: null\r\n          });\r\n          \r\n        } catch (error) {\r\n          console.warn(`Failed to create worker ${i}:`, error);\r\n        }\r\n      }\r\n      \r\n      console.log(`Initialized ${this.workerPool.length} Web Workers`);\r\n    } catch (error) {\r\n      console.warn('Failed to initialize worker pool:', error);\r\n      // Continue without workers\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Setup performance monitoring callbacks\r\n   */\r\n  setupPerformanceCallbacks() {\r\n    if (!this.performanceMonitor) return;\r\n    \r\n    // Handle quality changes\r\n    this.performanceMonitor.onQualityChange((event) => {\r\n      this.handleQualityChange(event);\r\n    });\r\n    \r\n    // Handle performance warnings\r\n    this.performanceMonitor.onPerformanceWarning((warning) => {\r\n      this.handlePerformanceWarning(warning);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Generate waveform with full optimization pipeline\r\n   */\r\n  async generateOptimizedWaveform(audioSource, options = {}) {\r\n    const startTime = performance.now();\r\n    \r\n    try {\r\n      // Record frame render start for performance monitoring\r\n      if (this.performanceMonitor) {\r\n        this.performanceMonitor.frameRenderStart();\r\n      }\r\n      \r\n      // Check cache first\r\n      let waveformData = null;\r\n      if (this.cache) {\r\n        const cacheKey = this.cache.generateCacheKey(audioSource, options);\r\n        waveformData = await this.cache.get(cacheKey);\r\n        \r\n        if (waveformData) {\r\n          this.updateCacheMetrics(true);\r\n          console.log('Waveform loaded from cache');\r\n          return waveformData;\r\n        } else {\r\n          this.updateCacheMetrics(false);\r\n        }\r\n      }\r\n      \r\n      // Get current adaptive settings for quality optimization\r\n      const adaptiveSettings = this.getAdaptiveSettings();\r\n      const optimizedOptions = {\r\n        ...options,\r\n        ...adaptiveSettings,\r\n        quality: adaptiveSettings.renderQuality || options.quality || 'medium'\r\n      };\r\n      \r\n      // Generate waveform using appropriate method\r\n      if (this.options.enableWebWorkers && this.workerPool.length > 0) {\r\n        waveformData = await this.generateWaveformWithWorker(audioSource, optimizedOptions);\r\n      } else {\r\n        waveformData = await this.generateWaveformDirect(audioSource, optimizedOptions);\r\n      }\r\n      \r\n      // Cache the result\r\n      if (this.cache && waveformData) {\r\n        const cacheKey = this.cache.generateCacheKey(audioSource, options);\r\n        await this.cache.set(cacheKey, waveformData, {\r\n          generationTime: performance.now() - startTime,\r\n          quality: optimizedOptions.quality,\r\n          method: this.options.enableWebWorkers ? 'worker' : 'direct'\r\n        });\r\n      }\r\n      \r\n      // Record frame render end for performance monitoring\r\n      if (this.performanceMonitor) {\r\n        this.performanceMonitor.frameRenderEnd();\r\n      }\r\n      \r\n      return waveformData;\r\n      \r\n    } catch (error) {\r\n      console.error('Optimized waveform generation failed:', error);\r\n      \r\n      // Try fallback generation with reduced quality\r\n      if (options.quality !== 'low') {\r\n        console.log('Attempting fallback generation with low quality');\r\n        return this.generateOptimizedWaveform(audioSource, {\r\n          ...options,\r\n          quality: 'low',\r\n          fallback: true\r\n        });\r\n      }\r\n      \r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate waveform using Web Worker\r\n   */\r\n  async generateWaveformWithWorker(audioSource, options) {\r\n    return new Promise((resolve, reject) => {\r\n      const taskId = this.generateTaskId();\r\n      const task = {\r\n        id: taskId,\r\n        type: 'ANALYZE_WAVEFORM',\r\n        data: {\r\n          audioBuffer: audioSource.buffer || audioSource,\r\n          options\r\n        },\r\n        resolve,\r\n        reject,\r\n        startTime: performance.now()\r\n      };\r\n      \r\n      // Try to assign to available worker\r\n      const availableWorker = this.getAvailableWorker();\r\n      if (availableWorker) {\r\n        this.assignTaskToWorker(task, availableWorker);\r\n      } else {\r\n        // Queue task if no workers available\r\n        this.workerQueue.push(task);\r\n        this.updateWorkerMetrics();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Generate waveform directly (fallback)\r\n   */\r\n  async generateWaveformDirect(audioSource, options) {\r\n    // Simplified direct generation for fallback\r\n    const audioBuffer = audioSource.buffer || audioSource;\r\n    if (!audioBuffer || !audioBuffer.length) {\r\n      throw new Error('Invalid audio buffer');\r\n    }\r\n    \r\n    const targetSampleRate = options.targetSampleRate || 1000;\r\n    const quality = options.quality || 'medium';\r\n    \r\n    // Allocate buffer using memory manager\r\n    let bufferId = null;\r\n    let outputBuffer = null;\r\n    \r\n    if (this.memoryManager) {\r\n      const allocation = this.memoryManager.allocateBuffer(\r\n        Math.floor(audioBuffer.length * targetSampleRate / 44100),\r\n        'waveform',\r\n        { source: 'direct-generation', quality }\r\n      );\r\n      bufferId = allocation.bufferId;\r\n      outputBuffer = allocation.buffer;\r\n    } else {\r\n      outputBuffer = new Float32Array(Math.floor(audioBuffer.length * targetSampleRate / 44100));\r\n    }\r\n    \r\n    try {\r\n      // Simple downsampling based on quality\r\n      const step = audioBuffer.length / outputBuffer.length;\r\n      \r\n      for (let i = 0; i < outputBuffer.length; i++) {\r\n        const sourceIndex = Math.floor(i * step);\r\n        \r\n        if (quality === 'high') {\r\n          // RMS calculation for better quality\r\n          let sum = 0;\r\n          const windowSize = Math.max(1, Math.floor(step));\r\n          for (let j = 0; j < windowSize && sourceIndex + j < audioBuffer.length; j++) {\r\n            const sample = audioBuffer[sourceIndex + j] || 0;\r\n            sum += sample * sample;\r\n          }\r\n          outputBuffer[i] = Math.sqrt(sum / windowSize);\r\n        } else {\r\n          // Simple sampling for performance\r\n          outputBuffer[i] = Math.abs(audioBuffer[sourceIndex] || 0);\r\n        }\r\n      }\r\n      \r\n      return {\r\n        samples: outputBuffer,\r\n        sampleRate: targetSampleRate,\r\n        duration: outputBuffer.length / targetSampleRate,\r\n        channels: 1,\r\n        metadata: {\r\n          analysisMethod: 'direct-optimized',\r\n          quality: quality,\r\n          generatedAt: Date.now(),\r\n          bufferId: bufferId\r\n        }\r\n      };\r\n      \r\n    } catch (error) {\r\n      // Clean up allocated buffer on error\r\n      if (bufferId && this.memoryManager) {\r\n        this.memoryManager.deallocateBuffer(bufferId, { poolForReuse: false });\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get available worker from pool\r\n   */\r\n  getAvailableWorker() {\r\n    return this.workerPool.find(workerInfo => !workerInfo.busy);\r\n  }\r\n\r\n  /**\r\n   * Assign task to worker\r\n   */\r\n  assignTaskToWorker(task, workerInfo) {\r\n    workerInfo.busy = true;\r\n    workerInfo.currentTask = task;\r\n    this.activeWorkerTasks.set(task.id, { task, workerInfo });\r\n    \r\n    workerInfo.worker.postMessage({\r\n      type: task.type,\r\n      taskId: task.id,\r\n      data: task.data\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Handle worker message\r\n   */\r\n  handleWorkerMessage(worker, event) {\r\n    const { type, taskId, data, error } = event.data;\r\n    const taskInfo = this.activeWorkerTasks.get(taskId);\r\n    \r\n    if (!taskInfo) {\r\n      console.warn(`Received message for unknown task: ${taskId}`);\r\n      return;\r\n    }\r\n    \r\n    const { task, workerInfo } = taskInfo;\r\n    \r\n    switch (type) {\r\n      case 'RESULT':\r\n        this.handleWorkerResult(task, data);\r\n        this.completeWorkerTask(taskId, workerInfo);\r\n        break;\r\n        \r\n      case 'ERROR':\r\n        this.handleWorkerError(task, error);\r\n        this.completeWorkerTask(taskId, workerInfo);\r\n        break;\r\n        \r\n      case 'PROGRESS':\r\n        this.handleWorkerProgress(task, data);\r\n        break;\r\n        \r\n      case 'PERFORMANCE_METRICS':\r\n        this.handleWorkerPerformanceMetrics(data);\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle worker result\r\n   */\r\n  handleWorkerResult(task, data) {\r\n    const processingTime = performance.now() - task.startTime;\r\n    this.updateWorkerTaskMetrics(processingTime, true);\r\n    \r\n    task.resolve(data);\r\n  }\r\n\r\n  /**\r\n   * Handle worker error\r\n   */\r\n  handleWorkerError(task, error) {\r\n    const processingTime = performance.now() - task.startTime;\r\n    this.updateWorkerTaskMetrics(processingTime, false);\r\n    \r\n    task.reject(new Error(error || 'Worker task failed'));\r\n  }\r\n\r\n  /**\r\n   * Handle worker progress\r\n   */\r\n  handleWorkerProgress(task, progressData) {\r\n    // Could emit progress events here if needed\r\n    console.log(`Task ${task.id} progress:`, progressData.progress);\r\n  }\r\n\r\n  /**\r\n   * Handle worker performance metrics\r\n   */\r\n  handleWorkerPerformanceMetrics(metrics) {\r\n    // Update overall performance metrics\r\n    this.metrics.workerTasks = {\r\n      ...this.metrics.workerTasks,\r\n      ...metrics\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Complete worker task and process queue\r\n   */\r\n  completeWorkerTask(taskId, workerInfo) {\r\n    // Mark worker as available\r\n    workerInfo.busy = false;\r\n    workerInfo.currentTask = null;\r\n    \r\n    // Remove from active tasks\r\n    this.activeWorkerTasks.delete(taskId);\r\n    \r\n    // Process next task in queue\r\n    if (this.workerQueue.length > 0) {\r\n      const nextTask = this.workerQueue.shift();\r\n      this.assignTaskToWorker(nextTask, workerInfo);\r\n    }\r\n    \r\n    this.updateWorkerMetrics();\r\n  }\r\n\r\n  /**\r\n   * Handle quality change from performance monitor\r\n   */\r\n  handleQualityChange(event) {\r\n    console.log(`Quality changed to ${event.newQuality} (${event.changeType})`);\r\n    \r\n    this.metrics.overallPerformance.qualityLevel = event.newQuality;\r\n    this.metrics.overallPerformance.degradationLevel = event.details.level || 0;\r\n    \r\n    // Could trigger cache cleanup or other optimizations here\r\n    if (event.newQuality === 'low' && this.cache) {\r\n      // Clear some cache to free memory\r\n      this.cache.optimizeMemoryUsage();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle performance warning\r\n   */\r\n  handlePerformanceWarning(warning) {\r\n    console.warn('Performance warning:', warning);\r\n    \r\n    if (warning.type === 'critical') {\r\n      // Trigger emergency optimizations\r\n      this.triggerEmergencyOptimizations();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trigger emergency optimizations\r\n   */\r\n  triggerEmergencyOptimizations() {\r\n    console.log('Triggering emergency optimizations');\r\n    \r\n    // Force memory cleanup\r\n    if (this.memoryManager) {\r\n      this.memoryManager.emergencyCleanup();\r\n    }\r\n    \r\n    // Clear cache\r\n    if (this.cache) {\r\n      this.cache.clear();\r\n    }\r\n    \r\n    // Reduce worker pool size temporarily\r\n    if (this.workerPool.length > 1) {\r\n      const excessWorkers = this.workerPool.splice(1);\r\n      excessWorkers.forEach(workerInfo => {\r\n        workerInfo.worker.terminate();\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current adaptive settings\r\n   */\r\n  getAdaptiveSettings() {\r\n    if (this.performanceMonitor) {\r\n      return this.performanceMonitor.getAdaptiveSettings();\r\n    }\r\n    \r\n    return {\r\n      renderQuality: 'medium',\r\n      waveformResolution: 1.0,\r\n      enableAntialiasing: true,\r\n      maxBatchSize: 1000\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update cache metrics\r\n   */\r\n  updateCacheMetrics(hit) {\r\n    if (hit) {\r\n      this.metrics.cachePerformance.hits++;\r\n    } else {\r\n      this.metrics.cachePerformance.misses++;\r\n    }\r\n    \r\n    const total = this.metrics.cachePerformance.hits + this.metrics.cachePerformance.misses;\r\n    this.metrics.cachePerformance.hitRate = this.metrics.cachePerformance.hits / total;\r\n  }\r\n\r\n  /**\r\n   * Update worker task metrics\r\n   */\r\n  updateWorkerTaskMetrics(processingTime, success) {\r\n    if (success) {\r\n      this.metrics.workerTasks.completed++;\r\n      \r\n      const avgTime = this.metrics.workerTasks.averageTime;\r\n      const count = this.metrics.workerTasks.completed;\r\n      this.metrics.workerTasks.averageTime = (avgTime * (count - 1) + processingTime) / count;\r\n    } else {\r\n      this.metrics.workerTasks.failed++;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update worker metrics\r\n   */\r\n  updateWorkerMetrics() {\r\n    this.metrics.workerTasks.queueLength = this.workerQueue.length;\r\n  }\r\n\r\n  /**\r\n   * Generate unique task ID\r\n   */\r\n  generateTaskId() {\r\n    return `task_${++this.taskIdCounter}_${Date.now()}`;\r\n  }\r\n\r\n  /**\r\n   * Get comprehensive performance metrics\r\n   */\r\n  getPerformanceMetrics() {\r\n    const baseMetrics = { ...this.metrics };\r\n    \r\n    // Add component-specific metrics\r\n    if (this.cache) {\r\n      baseMetrics.cache = this.cache.getStats();\r\n    }\r\n    \r\n    if (this.memoryManager) {\r\n      baseMetrics.memory = this.memoryManager.getMemoryStats();\r\n    }\r\n    \r\n    if (this.performanceMonitor) {\r\n      baseMetrics.performance = this.performanceMonitor.getMetrics();\r\n      baseMetrics.overallPerformance.score = baseMetrics.performance.performanceScore;\r\n    }\r\n    \r\n    return baseMetrics;\r\n  }\r\n\r\n  /**\r\n   * Force quality level\r\n   */\r\n  setQualityLevel(level) {\r\n    if (this.performanceMonitor) {\r\n      this.performanceMonitor.forceQualityLevel(level);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear all caches and reset state\r\n   */\r\n  async clearCaches() {\r\n    if (this.cache) {\r\n      await this.cache.clear();\r\n    }\r\n    \r\n    if (this.memoryManager) {\r\n      this.memoryManager.emergencyCleanup();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Optimize for low-end devices\r\n   */\r\n  optimizeForLowEndDevice() {\r\n    console.log('Optimizing for low-end device');\r\n    \r\n    // Force low quality\r\n    this.setQualityLevel('low');\r\n    \r\n    // Reduce worker pool size\r\n    if (this.workerPool.length > 1) {\r\n      const excessWorkers = this.workerPool.splice(1);\r\n      excessWorkers.forEach(workerInfo => {\r\n        workerInfo.worker.terminate();\r\n      });\r\n    }\r\n    \r\n    // Reduce cache size\r\n    if (this.cache) {\r\n      this.cache.maxMemorySize = 50 * 1024 * 1024; // 50MB\r\n      this.cache.maxCacheEntries = 25;\r\n    }\r\n    \r\n    // More aggressive memory management\r\n    if (this.memoryManager) {\r\n      this.memoryManager.maxMemoryThreshold = 100 * 1024 * 1024; // 100MB\r\n      this.memoryManager.warningThreshold = 75 * 1024 * 1024; // 75MB\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroy optimizer and cleanup resources\r\n   */\r\n  destroy() {\r\n    console.log('Destroying WaveformPerformanceOptimizer');\r\n    \r\n    // Stop performance monitoring\r\n    if (this.performanceMonitor) {\r\n      this.performanceMonitor.destroy();\r\n      this.performanceMonitor = null;\r\n    }\r\n    \r\n    // Destroy memory manager\r\n    if (this.memoryManager) {\r\n      this.memoryManager.destroy();\r\n      this.memoryManager = null;\r\n    }\r\n    \r\n    // Destroy cache\r\n    if (this.cache) {\r\n      this.cache.destroy();\r\n      this.cache = null;\r\n    }\r\n    \r\n    // Terminate all workers\r\n    this.workerPool.forEach(workerInfo => {\r\n      workerInfo.worker.terminate();\r\n    });\r\n    this.workerPool = [];\r\n    \r\n    // Clear active tasks\r\n    this.activeWorkerTasks.clear();\r\n    this.workerQueue = [];\r\n    \r\n    this.isInitialized = false;\r\n  }\r\n}\r\n\r\nexport default WaveformPerformanceOptimizer;"],"names":["VisualEnhancementEngine","constructor","options","this","enableFrequencyColorCoding","enableAmplitudeColorCoding","enableStructureDetection","enableAccessibilityMode","enableHighContrastMode","colorScheme","frequencyColorSchemes","default","bass","r","g","b","lowMid","mid","highMid","treble","amplitudeColorMap","silent","alpha","brightness","quiet","moderate","loud","peak","structurePatterns","verse","color","pattern","description","chorus","bridge","intro","outro","break","accessibilityPatterns","density","cache","Map","applyFrequencyColorCoding","waveformData","frequencyData","getDefaultWaveformColors","cacheKey","duration","has","get","coloredSegments","segmentSize","Math","floor","length","i","startIdx","endIdx","min","frequencyProfile","analyzeFrequencyContent","slice","dominantColor","getDominantFrequencyColor","push","startTime","endTime","set","applyAmplitudeColorCoding","samples","amplitudeSegments","rms","calculateRMS","amplitudeLevel","categorizeAmplitude","amplitude","level","colorModifier","detectSongStructure","metadata","JSON","stringify","structureSections","energyProfile","analyzeEnergyProfile","identifyStructuralSections","forEach","section","type","visualPattern","accessibilityLabel","applyHighContrastMode","colorData","map","segment","convertToHighContrast","strokeWidth","max","shadowBlur","shadowColor","generateAccessibilityPatterns","patterns","dominantFreq","getDominantFrequency","frequencyType","createVisualSettings","frequencyColorCoding","enabled","intensity","blendMode","amplitudeColorCoding","sensitivity","dynamicRange","structureDetection","showLabels","showPatterns","accessibility","highContrastMode","alternativePatterns","textSize","reducedMotion","enhancements","gradientFill","shadowEffects","animatedElements","particleEffects","updateVisualSettings","newSettings","previewCallback","oldSettings","Object","assign","clear","error","bassEnergy","calculateBandEnergy","lowMidEnergy","midEnergy","highMidEnergy","trebleEnergy","startBin","endBin","energy","sqrt","energies","dominantRange","keys","reduce","a","baseColor","round","sum","windowSize","start","end","windowSamples","spectralCentroid","calculateSpectralCentroid","time","variance","calculateVariance","sections","currentSection","window","index","sectionType","classifySection","confidence","weightedSum","magnitudeSum","magnitude","abs","mean","val","pow","Infinity","destroy","EnhancedCanvasRenderer","CanvasRenderer","container","super","visualEnhancementEngine","frequencyColorData","amplitudeColorData","structureData","patternCache","animationState","pulsePhase","particleSystem","initializeEnhancedFeatures","layerManager","createLayer","initializeAccessibilityPatterns","startEnhancementAnimationLoop","renderWaveform","renderVisualEnhancements","viewport","viewportManager","getViewportBounds","width","height","getDimensions","generateEnhancedVisualData","renderFrequencyColorOverlay","renderAmplitudeColorOverlay","renderStructureOverlay","renderAccessibilityPatterns","layer","getLayer","ctx","clearLayer","startX","timeToPixel","segmentWidth","gradient","createFrequencyGradient","globalCompositeOperation","fillStyle","fillRect","markLayerClean","x","createLinearGradient","totalEnergy","addColorStop","currentStop","bassRatio","lowMidRatio","midRatio","highMidRatio","trebleRatio","globalAlpha","amplitudeColor","getAmplitudeLevelColor","colors","sectionWidth","renderStructureSection","renderStructureLabel","strokeStyle","lineWidth","setLineDash","strokeRect","y","beginPath","arc","PI","fill","centerX","labelText","toUpperCase","font","textAlign","textBaseline","textWidth","measureText","labelY","padding","fillText","patternSegment","renderAccessibilityPattern","spacing","high","medium","low","sparse","moveTo","lineTo","stroke","offset","layerName","canvas","filter","densities","key","generatePatternData","animate","timestamp","updateAnimatedElements","requestAnimationFrame","markLayerDirty","getVisualEnhancementEngine","WaveformPerformanceOptimizer","enableWebWorkers","enableCaching","enableMemoryManagement","enablePerformanceMonitoring","workerPoolSize","memoryManager","performanceMonitor","workerPool","workerQueue","isInitialized","activeWorkerTasks","taskIdCounter","metrics","workerTasks","completed","failed","averageTime","queueLength","cachePerformance","hits","misses","hitRate","memoryOptimization","cleanupCount","memoryReclaimed","currentUsage","overallPerformance","score","qualityLevel","degradationLevel","initialize","WaveformCache","maxMemorySize","cacheMaxMemory","maxCacheEntries","cacheMaxEntries","persistenceEnabled","cachePersistence","compressionEnabled","cacheCompression","initializePersistence","WaveformMemoryManager","maxMemoryThreshold","memoryMaxThreshold","warningThreshold","memoryWarningThreshold","cleanupInterval","memoryCleanupInterval","WaveformPerformanceMonitor","targetFPS","minFPS","degradationThreshold","recoveryThreshold","setupPerformanceCallbacks","startMonitoring","initializeWorkerPool","workerScript","URL","url","worker","Worker","onmessage","event","handleWorkerMessage","onerror","handleWorkerError","id","busy","currentTask","onQualityChange","handleQualityChange","onPerformanceWarning","warning","handlePerformanceWarning","generateOptimizedWaveform","audioSource","performance","now","frameRenderStart","generateCacheKey","updateCacheMetrics","adaptiveSettings","getAdaptiveSettings","optimizedOptions","quality","renderQuality","generateWaveformWithWorker","generateWaveformDirect","generationTime","method","frameRenderEnd","fallback","Promise","resolve","reject","task","generateTaskId","data","audioBuffer","buffer","availableWorker","getAvailableWorker","assignTaskToWorker","updateWorkerMetrics","Error","targetSampleRate","bufferId","outputBuffer","allocation","allocateBuffer","source","Float32Array","step","sourceIndex","j","sample","sampleRate","channels","analysisMethod","generatedAt","Date","deallocateBuffer","poolForReuse","find","workerInfo","postMessage","taskId","taskInfo","handleWorkerResult","completeWorkerTask","handleWorkerProgress","handleWorkerPerformanceMetrics","processingTime","updateWorkerTaskMetrics","progressData","delete","nextTask","shift","newQuality","details","optimizeMemoryUsage","triggerEmergencyOptimizations","emergencyCleanup","splice","terminate","waveformResolution","enableAntialiasing","maxBatchSize","hit","total","success","avgTime","count","getPerformanceMetrics","baseMetrics","getStats","memory","getMemoryStats","getMetrics","performanceScore","setQualityLevel","forceQualityLevel","clearCaches","optimizeForLowEndDevice"],"mappings":"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"}